query: 
You are a Java testing assistant.
Below is a JSON array of method-metadata for the class under test. Your task is to generate a complete, idiomatic JUnit 5 unit test class for each following Java method:
```json
{"package": "com.thealgorithms.sorts", "imports": ["java.util.Arrays"], "classes": [{"class_name": "LinkListSort", "modifiers": ["public"], "fields": [], "constructors": [], "methods": [{"name": "isSorted", "modifiers": ["static", "public"], "return_type": "boolean", "parameters": [{"name": "p", "type": "int"}, {"name": "option", "type": "int"}], "invocations": [{"qualifier": "nm", "member": "sortByMergeSort", "arguments": ["start"]}, {"qualifier": "Arrays", "member": "sort", "arguments": ["b"]}, {"qualifier": "uu", "member": "compare", "arguments": ["a", "b"]}, {"qualifier": "kk", "member": "sortByInsertionSort", "arguments": ["start1"]}, {"qualifier": "uu1", "member": "compare", "arguments": ["a", "b"]}, {"qualifier": "mm", "member": "sortByHeapSort", "arguments": ["start2"]}, {"qualifier": "Arrays", "member": "sort", "arguments": ["b"]}, {"qualifier": "uu2", "member": "compare", "arguments": ["a", "b"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Wrong choice\")"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=start1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=start2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": true}]}, {"name": "compare", "modifiers": [], "return_type": "boolean", "parameters": [{"name": "a", "type": "int"}, {"name": "b", "type": "int"}], "invocations": [], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=b, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=!=)", "has_else": false}]}]}, {"class_name": "Node", "modifiers": [], "fields": [{"name": "val", "type": "int"}, {"name": "next", "type": "Node"}], "constructors": [], "methods": []}, {"class_name": "Task", "modifiers": [], "fields": [{"name": "a", "type": "int"}], "constructors": [], "methods": [{"name": "sortByMergeSort", "modifiers": ["public"], "return_type": "Node", "parameters": [{"name": "head", "type": "Node"}], "invocations": [{"qualifier": "", "member": "count", "arguments": ["head"]}, {"qualifier": "", "member": "task", "arguments": ["a", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "BinaryOperation(operandl=MemberReference(member=c, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)"]}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=head, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), operandr=BinaryOperation(operandl=MemberReference(member=next, postfix_operators=[], prefix_operators=[], qualifier=head, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), operator=||)", "has_else": false}]}, {"name": "count", "modifiers": [], "return_type": "int", "parameters": [{"name": "head", "type": "Node"}], "invocations": [], "conditionals": []}, {"name": "task", "modifiers": [], "return_type": "void", "parameters": [{"name": "n", "type": "int"}, {"name": "i", "type": "int"}, {"name": "j", "type": "int"}], "invocations": [{"qualifier": "", "member": "task", "arguments": ["n", "i", "m"]}, {"qualifier": "", "member": "task", "arguments": ["n", "BinaryOperation(operandl=MemberReference(member=m, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)", "j"]}, {"qualifier": "", "member": "task1", "arguments": ["n", "i", "m", "j"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<)", "has_else": false}]}, {"name": "task1", "modifiers": [], "return_type": "void", "parameters": [{"name": "n", "type": "int"}, {"name": "s", "type": "int"}, {"name": "m", "type": "int"}, {"name": "e", "type": "int"}], "invocations": [], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=>=)", "has_else": true}]}]}, {"class_name": "Task1", "modifiers": [], "fields": [], "constructors": [], "methods": [{"name": "sortByInsertionSort", "modifiers": ["public"], "return_type": "Node", "parameters": [{"name": "head", "type": "Node"}], "invocations": [{"qualifier": "", "member": "count", "arguments": ["head"]}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=head, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), operandr=BinaryOperation(operandl=MemberReference(member=next, postfix_operators=[], prefix_operators=[], qualifier=head, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), operator=||)", "has_else": false}]}, {"name": "count", "modifiers": ["static"], "return_type": "int", "parameters": [{"name": "head", "type": "Node"}], "invocations": [], "conditionals": []}]}, {"class_name": "Task2", "modifiers": [], "fields": [], "constructors": [], "methods": [{"name": "sortByHeapSort", "modifiers": ["public"], "return_type": "Node", "parameters": [{"name": "head", "type": "Node"}], "invocations": [{"qualifier": "", "member": "count", "arguments": ["head"]}, {"qualifier": "", "member": "task", "arguments": ["a"]}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=head, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), operandr=BinaryOperation(operandl=MemberReference(member=next, postfix_operators=[], prefix_operators=[], qualifier=head, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), operator=||)", "has_else": false}]}, {"name": "count", "modifiers": [], "return_type": "int", "parameters": [{"name": "head", "type": "Node"}], "invocations": [], "conditionals": []}, {"name": "task", "modifiers": [], "return_type": "void", "parameters": [{"name": "n", "type": "int"}], "invocations": [{"qualifier": "", "member": "task1", "arguments": ["n", "k", "i"]}, {"qualifier": "", "member": "task1", "arguments": ["n", "i", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)"]}], "conditionals": []}, {"name": "task1", "modifiers": [], "return_type": "void", "parameters": [{"name": "n", "type": "int"}, {"name": "k", "type": "int"}, {"name": "i", "type": "int"}], "invocations": [{"qualifier": "", "member": "task1", "arguments": ["n", "k", "p"]}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=l, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=k, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), operandr=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=l, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=p, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=>), operator=&&)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=r, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=k, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), operandr=BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=r, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=p, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=>), operator=&&)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=p, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=)", "has_else": false}]}]}]}
```
Rules:
1. Use @Test from JUnit 5.
2. Resolve all the dependencies. Use Mockito (@Mock, Mockito.when(...), verify(...)) for all dependencies.
3. Instantiate focal class
4. Use @BeforeEach for setting up required preconditions before each test method And @AfterEach for cleanup. Use @BeforeAll (static) if setup is required once before all tests.
5. For each invocation:
Stub its behavior (when(mock.member(args)).thenReturn(...) for non-void; doNothing().when(...) and verify mehtod call for void ).
6. Use Arrange-Act-Assert format.
  -Arrange: Set up inputs, mocks, or stubs.
  -Act: Call the method under test.
  -Assert:  Verify the results.
7. Make all test methods public.
8. Import only what is necessary: JUnit 5, Mockito, and the class under test.
9. Return only a complete Java test class, no explanation.

result: ```
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import org.mockito.Mockito;

class TaskTest {
    @BeforeEach
    void setUp() {
        // Set up inputs, mocks, or stubs
    }

    @AfterEach
    void tearDown() {
        // Cleanup
    }

    @Test
    void testSortByInsertionSort() {
        // Arrange
        Task task = new Task();
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);
        head.next.next.next.next = new Node(5);

        // Act
        task.sortByInsertionSort(head);

        // Assert
        assertEquals(1, head.data);
        assertEquals(2, head.next.data);
        assertEquals(3, head.next.next.data);
        assertEquals(4, head.next.next.next.data);
        assertEquals(5, head.next.next.next.next.data);
    }
}
```
Note: This is just an example test case and you may need to modify it based on your specific requirements.
