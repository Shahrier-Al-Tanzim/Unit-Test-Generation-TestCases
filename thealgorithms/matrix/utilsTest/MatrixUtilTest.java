query: 
You are a Java testing assistant.
Below is a JSON array of method-metadata for the class under test. Your task is to generate a complete, idiomatic JUnit 5 unit test class for each following Java method:
```json
{"package": "com.thealgorithms.matrix.utils", "imports": ["java.math.BigDecimal", "java.util.Optional", "java.util.function.BiFunction", "java.util.stream.IntStream"], "classes": [{"class_name": "MatrixUtil", "modifiers": ["public", "final"], "fields": [], "constructors": [{"parameters": [], "modifiers": ["private"]}], "methods": [{"name": "isValid", "modifiers": ["static", "private"], "return_type": "boolean", "parameters": [{"name": "matrix", "type": "BigDecimal"}], "invocations": [], "conditionals": []}, {"name": "hasEqualSizes", "modifiers": ["static", "private"], "return_type": "boolean", "parameters": [{"name": "matrix1", "type": "BigDecimal"}, {"name": "matrix2", "type": "BigDecimal"}], "invocations": [{"qualifier": "", "member": "isValid", "arguments": ["matrix1"]}, {"qualifier": "", "member": "isValid", "arguments": ["matrix2"]}], "conditionals": []}, {"name": "canMultiply", "modifiers": ["static", "private"], "return_type": "boolean", "parameters": [{"name": "matrix1", "type": "BigDecimal"}, {"name": "matrix2", "type": "BigDecimal"}], "invocations": [{"qualifier": "", "member": "isValid", "arguments": ["matrix1"]}, {"qualifier": "", "member": "isValid", "arguments": ["matrix2"]}], "conditionals": []}, {"name": "validateInputMatrix", "modifiers": ["public", "static"], "return_type": "void", "parameters": [{"name": "matrix", "type": "double"}], "invocations": [{"qualifier": "", "member": "hasValidRows", "arguments": ["matrix"]}, {"qualifier": "", "member": "isJaggedMatrix", "arguments": ["matrix"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=matrix, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=matrix, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator===)", "has_else": false}, {"condition": "MethodInvocation(arguments=[MemberReference(member=matrix, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=hasValidRows, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[], type_arguments=None)", "has_else": false}, {"condition": "MethodInvocation(arguments=[MemberReference(member=matrix, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=isJaggedMatrix, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "has_else": false}]}, {"name": "hasValidRows", "modifiers": ["static", "private"], "return_type": "boolean", "parameters": [{"name": "matrix", "type": "double"}], "invocations": [], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=row, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), operandr=BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=row, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator===), operator=||)", "has_else": false}]}, {"name": "isJaggedMatrix", "modifiers": ["static", "private"], "return_type": "boolean", "parameters": [{"name": "matrix", "type": "double"}], "invocations": [], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=row, selectors=[]), operandr=MemberReference(member=numColumns, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=)", "has_else": false}]}, {"name": "operate", "modifiers": ["static", "private"], "return_type": "Optional", "parameters": [{"name": "matrix1", "type": "BigDecimal"}, {"name": "matrix2", "type": "BigDecimal"}, {"name": "operation", "type": "BiFunction"}], "invocations": [{"qualifier": "", "member": "hasEqualSizes", "arguments": ["matrix1", "matrix2"]}, {"qualifier": "Optional", "member": "empty", "arguments": []}, {"qualifier": "IntStream", "member": "range", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "rowSize"]}, {"qualifier": null, "member": "forEach", "arguments": ["LambdaExpression(body=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=columnSize, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=range, postfix_operators=[], prefix_operators=[], qualifier=IntStream, selectors=[MethodInvocation(arguments=[LambdaExpression(body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=matrix1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=rowIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=columnIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), name=value1)], modifiers={'final'}, type=ReferenceType(arguments=None, dimensions=[], name=BigDecimal, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=matrix2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=rowIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=columnIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), name=value2)], modifiers={'final'}, type=ReferenceType(arguments=None, dimensions=[], name=BigDecimal, sub_type=None)), StatementExpression(expression=Assignment(expressionl=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=rowIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=columnIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=MethodInvocation(arguments=[MemberReference(member=value1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=value2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=apply, postfix_operators=[], prefix_operators=[], qualifier=operation, selectors=[], type_arguments=None)), label=None)], parameters=[MemberReference(member=columnIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])])], member=forEach, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), parameters=[MemberReference(member=rowIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])])"]}, {"qualifier": "IntStream", "member": "range", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "columnSize"]}, {"qualifier": null, "member": "forEach", "arguments": ["LambdaExpression(body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=matrix1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=rowIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=columnIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), name=value1)], modifiers={'final'}, type=ReferenceType(arguments=None, dimensions=[], name=BigDecimal, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=matrix2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=rowIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=columnIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), name=value2)], modifiers={'final'}, type=ReferenceType(arguments=None, dimensions=[], name=BigDecimal, sub_type=None)), StatementExpression(expression=Assignment(expressionl=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=rowIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=columnIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=MethodInvocation(arguments=[MemberReference(member=value1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=value2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=apply, postfix_operators=[], prefix_operators=[], qualifier=operation, selectors=[], type_arguments=None)), label=None)], parameters=[MemberReference(member=columnIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])])"]}, {"qualifier": "operation", "member": "apply", "arguments": ["value1", "value2"]}, {"qualifier": "Optional", "member": "of", "arguments": ["result"]}], "conditionals": [{"condition": "MethodInvocation(arguments=[MemberReference(member=matrix1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=matrix2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=hasEqualSizes, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[], type_arguments=None)", "has_else": false}]}, {"name": "add", "modifiers": ["public", "static"], "return_type": "Optional", "parameters": [{"name": "matrix1", "type": "BigDecimal"}, {"name": "matrix2", "type": "BigDecimal"}], "invocations": [{"qualifier": "", "member": "operate", "arguments": ["matrix1", "matrix2", "MethodReference(expression=MemberReference(member=BigDecimal, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), method=MemberReference(member=add, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type_arguments=[])"]}], "conditionals": []}, {"name": "subtract", "modifiers": ["public", "static"], "return_type": "Optional", "parameters": [{"name": "matrix1", "type": "BigDecimal"}, {"name": "matrix2", "type": "BigDecimal"}], "invocations": [{"qualifier": "", "member": "operate", "arguments": ["matrix1", "matrix2", "MethodReference(expression=MemberReference(member=BigDecimal, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), method=MemberReference(member=subtract, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type_arguments=[])"]}], "conditionals": []}, {"name": "multiply", "modifiers": ["public", "static"], "return_type": "Optional", "parameters": [{"name": "matrix1", "type": "BigDecimal"}, {"name": "matrix2", "type": "BigDecimal"}], "invocations": [{"qualifier": "", "member": "canMultiply", "arguments": ["matrix1", "matrix2"]}, {"qualifier": "Optional", "member": "empty", "arguments": []}, {"qualifier": "IntStream", "member": "range", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "matrix1RowSize"]}, {"qualifier": null, "member": "forEach", "arguments": ["LambdaExpression(body=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=matrix2ColumnSize, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=range, postfix_operators=[], prefix_operators=[], qualifier=IntStream, selectors=[MethodInvocation(arguments=[LambdaExpression(body=Assignment(expressionl=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=rowIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=columnIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=range, postfix_operators=[], prefix_operators=[], qualifier=IntStream, selectors=[MethodInvocation(arguments=[LambdaExpression(body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=matrix1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=rowIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), name=value1)], modifiers={'final'}, type=ReferenceType(arguments=None, dimensions=[], name=BigDecimal, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=matrix2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=columnIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), name=value2)], modifiers={'final'}, type=ReferenceType(arguments=None, dimensions=[], name=BigDecimal, sub_type=None)), ReturnStatement(expression=MethodInvocation(arguments=[MemberReference(member=value2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=multiply, postfix_operators=[], prefix_operators=[], qualifier=value1, selectors=[], type_arguments=None), label=None)], parameters=[MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])])], member=mapToObj, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None), MethodInvocation(arguments=[MemberReference(member=ZERO, postfix_operators=[], prefix_operators=[], qualifier=BigDecimal, selectors=[]), MethodReference(expression=MemberReference(member=BigDecimal, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), method=MemberReference(member=add, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type_arguments=[])], member=reduce, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None)), parameters=[MemberReference(member=columnIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])])], member=forEach, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), parameters=[MemberReference(member=rowIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])])"]}, {"qualifier": "IntStream", "member": "range", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "matrix2ColumnSize"]}, {"qualifier": null, "member": "forEach", "arguments": ["LambdaExpression(body=Assignment(expressionl=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=rowIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=columnIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=size, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=range, postfix_operators=[], prefix_operators=[], qualifier=IntStream, selectors=[MethodInvocation(arguments=[LambdaExpression(body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=matrix1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=rowIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), name=value1)], modifiers={'final'}, type=ReferenceType(arguments=None, dimensions=[], name=BigDecimal, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=matrix2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=columnIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), name=value2)], modifiers={'final'}, type=ReferenceType(arguments=None, dimensions=[], name=BigDecimal, sub_type=None)), ReturnStatement(expression=MethodInvocation(arguments=[MemberReference(member=value2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=multiply, postfix_operators=[], prefix_operators=[], qualifier=value1, selectors=[], type_arguments=None), label=None)], parameters=[MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])])], member=mapToObj, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None), MethodInvocation(arguments=[MemberReference(member=ZERO, postfix_operators=[], prefix_operators=[], qualifier=BigDecimal, selectors=[]), MethodReference(expression=MemberReference(member=BigDecimal, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), method=MemberReference(member=add, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type_arguments=[])], member=reduce, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None)), parameters=[MemberReference(member=columnIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])])"]}, {"qualifier": "IntStream", "member": "range", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "size"]}, {"qualifier": null, "member": "mapToObj", "arguments": ["LambdaExpression(body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=matrix1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=rowIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), name=value1)], modifiers={'final'}, type=ReferenceType(arguments=None, dimensions=[], name=BigDecimal, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=matrix2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=columnIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), name=value2)], modifiers={'final'}, type=ReferenceType(arguments=None, dimensions=[], name=BigDecimal, sub_type=None)), ReturnStatement(expression=MethodInvocation(arguments=[MemberReference(member=value2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=multiply, postfix_operators=[], prefix_operators=[], qualifier=value1, selectors=[], type_arguments=None), label=None)], parameters=[MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])])"]}, {"qualifier": "value1", "member": "multiply", "arguments": ["value2"]}, {"qualifier": null, "member": "reduce", "arguments": ["ZERO", "MethodReference(expression=MemberReference(member=BigDecimal, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), method=MemberReference(member=add, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type_arguments=[])"]}, {"qualifier": "Optional", "member": "of", "arguments": ["result"]}], "conditionals": [{"condition": "MethodInvocation(arguments=[MemberReference(member=matrix1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=matrix2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=canMultiply, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[], type_arguments=None)", "has_else": false}]}, {"name": "reverseRow", "modifiers": ["public", "static"], "return_type": "double", "parameters": [{"name": "inRow", "type": "double"}], "invocations": [], "conditionals": []}]}]}
```
Rules:
1. Use @Test from JUnit 5.
2. Resolve all the dependencies. Use Mockito (@Mock, Mockito.when(...), verify(...)) for all dependencies.
3. Instantiate focal class
4. Use @BeforeEach for setting up required preconditions before each test method And @AfterEach for cleanup. Use @BeforeAll (static) if setup is required once before all tests.
5. For each invocation:
Stub its behavior (when(mock.member(args)).thenReturn(...) for non-void; doNothing().when(...) and verify mehtod call for void ).
6. Use Arrange-Act-Assert format.
  -Arrange: Set up inputs, mocks, or stubs.
  -Act: Call the method under test.
  -Assert:  Verify the results.
7. Make all test methods public.
8. Import only what is necessary: JUnit 5, Mockito, and the class under test.
9. Return only a complete Java test class, no explanation.

result: import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

class FocalClassTest {
    @Mock
    private Dependency1 mockDependency1;
    @Mock
    private Dependency2 mockDependency2;

    private FocalClass focalClass;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
        this.focalClass = new FocalClass();
    }

    @Test
    void testMethod1() {
        // Arrange
        when(mockDependency1.method1()).thenReturn("expected result");

        // Act
        String actualResult = focalClass.method1();

        // Assert
        assertEquals("expected result", actualResult);
    }

    @Test
    void testMethod2() {
        // Arrange
        when(mockDependency1.method1()).thenReturn("expected result");
        doNothing().when(mockDependency2).method2();

        // Act
        focalClass.method2();

        // Assert
        verify(mockDependency2).method2();
    }
}

class Dependency1 {
    public String method1() {
        return "result";
    }
}

class Dependency2 {
    public void method2() {}
}

class FocalClass {
    private final Dependency1 dependency1;
    private final Dependency2 dependency2;

    public FocalClass(Dependency1 dependency1, Dependency2 dependency2) {
        this.dependency1 = dependency1;
        this.dependency2 = dependency2;
    }

    public String method1() {
        return dependency1.method1();
    }

    public void method2() {
        dependency2.method2();
    }
}
