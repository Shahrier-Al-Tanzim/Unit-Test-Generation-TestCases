query: 
You are a Java testing assistant.
Below is a JSON array of method-metadata for the class under test. Your task is to generate a complete, idiomatic JUnit 5 unit test class for each following Java method:
```json
{"package": "com.thealgorithms.geometry", "imports": ["java.util.ArrayList", "java.util.Collection", "java.util.Collections", "java.util.Comparator", "java.util.HashSet", "java.util.List", "java.util.Set", "java.util.TreeSet"], "classes": [{"class_name": "ConvexHull", "modifiers": ["public", "final"], "fields": [], "constructors": [{"parameters": [], "modifiers": ["private"]}], "methods": [{"name": "checkPointOrientation", "modifiers": ["static", "private"], "return_type": "boolean", "parameters": [{"name": "i", "type": "Point"}, {"name": "j", "type": "Point"}, {"name": "k", "type": "Point"}], "invocations": [{"qualifier": "Point", "member": "orientation", "arguments": ["i", "j", "k"]}, {"qualifier": "k", "member": "compareTo", "arguments": ["i"]}, {"qualifier": "k", "member": "compareTo", "arguments": ["j"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=detK, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=>)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=detK, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=<)", "has_else": true}]}, {"name": "convexHullBruteForce", "modifiers": ["public", "static"], "return_type": "List", "parameters": [{"name": "points", "type": "List"}], "invocations": [{"qualifier": "Comparator", "member": "naturalOrder", "arguments": []}, {"qualifier": "points", "member": "size", "arguments": []}, {"qualifier": "points", "member": "size", "arguments": []}, {"qualifier": "", "member": "checkPointOrientation", "arguments": ["MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=points, selectors=[], type_arguments=None)", "MethodInvocation(arguments=[MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=points, selectors=[], type_arguments=None)", "MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+), operandr=MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=points, selectors=[], type_arguments=None), operator=%)], member=get, postfix_operators=[], prefix_operators=[], qualifier=points, selectors=[], type_arguments=None)"]}, {"qualifier": "points", "member": "get", "arguments": ["i"]}, {"qualifier": "points", "member": "get", "arguments": ["j"]}, {"qualifier": "points", "member": "get", "arguments": ["BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+), operandr=MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=points, selectors=[], type_arguments=None), operator=%)"]}, {"qualifier": "points", "member": "size", "arguments": []}, {"qualifier": "points", "member": "size", "arguments": []}, {"qualifier": "", "member": "checkPointOrientation", "arguments": ["MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=points, selectors=[], type_arguments=None)", "MethodInvocation(arguments=[MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=points, selectors=[], type_arguments=None)", "MethodInvocation(arguments=[MemberReference(member=k, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=points, selectors=[], type_arguments=None)"]}, {"qualifier": "points", "member": "get", "arguments": ["i"]}, {"qualifier": "points", "member": "get", "arguments": ["j"]}, {"qualifier": "points", "member": "get", "arguments": ["k"]}, {"qualifier": "convexSet", "member": "add", "arguments": ["MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=points, selectors=[], type_arguments=None)"]}, {"qualifier": "points", "member": "get", "arguments": ["i"]}, {"qualifier": "convexSet", "member": "add", "arguments": ["MethodInvocation(arguments=[MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=points, selectors=[], type_arguments=None)"]}, {"qualifier": "points", "member": "get", "arguments": ["j"]}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=k, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=), operandr=BinaryOperation(operandl=MemberReference(member=k, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=), operator=&&), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=points, selectors=[], type_arguments=None), MethodInvocation(arguments=[MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=points, selectors=[], type_arguments=None), MethodInvocation(arguments=[MemberReference(member=k, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=points, selectors=[], type_arguments=None)], member=checkPointOrientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), operandr=MemberReference(member=leftSide, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=), operator=&&)", "has_else": false}, {"condition": "MemberReference(member=allPointsOnOneSide, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])", "has_else": false}]}, {"name": "convexHullRecursive", "modifiers": ["public", "static"], "return_type": "List", "parameters": [{"name": "points", "type": "List"}], "invocations": [{"qualifier": "Collections", "member": "sort", "arguments": ["points"]}, {"qualifier": "points", "member": "get", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)"]}, {"qualifier": "points", "member": "get", "arguments": ["BinaryOperation(operandl=MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=points, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)"]}, {"qualifier": "points", "member": "size", "arguments": []}, {"qualifier": "convexSet", "member": "add", "arguments": ["leftMostPoint"]}, {"qualifier": "convexSet", "member": "add", "arguments": ["rightMostPoint"]}, {"qualifier": "points", "member": "size", "arguments": []}, {"qualifier": "Point", "member": "orientation", "arguments": ["leftMostPoint", "rightMostPoint", "MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=points, selectors=[], type_arguments=None)"]}, {"qualifier": "points", "member": "get", "arguments": ["i"]}, {"qualifier": "upperHull", "member": "add", "arguments": ["MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=points, selectors=[], type_arguments=None)"]}, {"qualifier": "points", "member": "get", "arguments": ["i"]}, {"qualifier": "lowerHull", "member": "add", "arguments": ["MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=points, selectors=[], type_arguments=None)"]}, {"qualifier": "points", "member": "get", "arguments": ["i"]}, {"qualifier": "", "member": "constructHull", "arguments": ["upperHull", "leftMostPoint", "rightMostPoint", "convexSet"]}, {"qualifier": "", "member": "constructHull", "arguments": ["lowerHull", "rightMostPoint", "leftMostPoint", "convexSet"]}, {"qualifier": "Collections", "member": "sort", "arguments": ["result"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=det, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=>)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=det, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=<)", "has_else": false}]}, {"name": "constructHull", "modifiers": ["static", "private"], "return_type": "void", "parameters": [{"name": "points", "type": "Collection"}, {"name": "left", "type": "Point"}, {"name": "right", "type": "Point"}, {"name": "convexSet", "type": "Set"}], "invocations": [{"qualifier": "points", "member": "isEmpty", "arguments": []}, {"qualifier": "Point", "member": "orientation", "arguments": ["left", "right", "p"]}, {"qualifier": "candidatePoints", "member": "add", "arguments": ["p"]}, {"qualifier": "", "member": "constructHull", "arguments": ["candidatePoints", "left", "extremePoint", "convexSet"]}, {"qualifier": "convexSet", "member": "add", "arguments": ["extremePoint"]}, {"qualifier": "", "member": "constructHull", "arguments": ["candidatePoints", "extremePoint", "right", "convexSet"]}], "conditionals": [{"condition": "MethodInvocation(arguments=[], member=isEmpty, postfix_operators=[], prefix_operators=['!'], qualifier=points, selectors=[], type_arguments=None)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=det, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=>)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=det, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=extremePointDistance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=extremePoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=)", "has_else": false}]}]}]}
```
Rules:
1. Use @Test from JUnit 5.
2. Resolve all the dependencies. Use Mockito (@Mock, Mockito.when(...), verify(...)) for all dependencies.
3. Instantiate focal class
4. Use @BeforeEach for setting up required preconditions before each test method And @AfterEach for cleanup. Use @BeforeAll (static) if setup is required once before all tests.
5. For each invocation:
Stub its behavior (when(mock.member(args)).thenReturn(...) for non-void; doNothing().when(...) and verify mehtod call for void ).
6. Use Arrange-Act-Assert format.
  -Arrange: Set up inputs, mocks, or stubs.
  -Act: Call the method under test.
  -Assert:  Verify the results.
7. Make all test methods public.
8. Import only what is necessary: JUnit 5, Mockito, and the class under test.
9. Return only a complete Java test class, no explanation.

result: Here's an example of how you could write a test for the `convexHull` method using JUnit 5 and Mockito:
```
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class ConvexHullTest {

    @Mock
    private List<Point> points;

    private ConvexHull convexHull;

    @BeforeEach
    public void setUp() {
        convexHull = new ConvexHull();
    }

    @Test
    public void testConvexHull() {
        // Arrange
        Point p1 = new Point(0, 0);
        Point p2 = new Point(1, 1);
        Point p3 = new Point(2, 2);
        points.add(p1);
        points.add(p2);
        points.add(p3);

        // Act
        List<Point> result = convexHull.convexHull(points);

        // Assert
        assertEquals(Arrays.asList(p1, p2, p3), result);
    }
}
```
In this example, we use the `@Mock` annotation to create a mock instance of the `List<Point>` class, and then we use the `when()` method from Mockito to stub the behavior of the `add()` method. We also use the `verify()` method to verify that the `convexHull()` method was called with the expected arguments.

Note that this is just one example of how you could write a test for the `convexHull` method, and there are many other ways to do it depending on your specific needs and requirements.
