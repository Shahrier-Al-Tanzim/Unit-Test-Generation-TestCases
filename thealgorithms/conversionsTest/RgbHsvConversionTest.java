query: 
You are a Java testing assistant.
Below is a JSON array of method-metadata for the class under test. Your task is to generate a complete, idiomatic JUnit 5 unit test class for each following Java method:
```json
{"package": "com.thealgorithms.conversions", "imports": ["java.util.Arrays"], "classes": [{"class_name": "RgbHsvConversion", "modifiers": ["public", "final"], "fields": [], "constructors": [{"parameters": [], "modifiers": ["private"]}], "methods": [{"name": "main", "modifiers": ["public", "static"], "return_type": "void", "parameters": [{"name": "args", "type": "String"}], "invocations": [{"qualifier": "Arrays", "member": "equals", "arguments": ["MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)], member=hsvToRgb, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "ArrayCreator(dimensions=[None], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int))"]}, {"qualifier": "", "member": "hsvToRgb", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)"]}, {"qualifier": "Arrays", "member": "equals", "arguments": ["MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)], member=hsvToRgb, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "ArrayCreator(dimensions=[None], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255)]), postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int))"]}, {"qualifier": "", "member": "hsvToRgb", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)"]}, {"qualifier": "Arrays", "member": "equals", "arguments": ["MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)], member=hsvToRgb, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "ArrayCreator(dimensions=[None], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int))"]}, {"qualifier": "", "member": "hsvToRgb", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)"]}, {"qualifier": "Arrays", "member": "equals", "arguments": ["MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=60), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)], member=hsvToRgb, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "ArrayCreator(dimensions=[None], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int))"]}, {"qualifier": "", "member": "hsvToRgb", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=60)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)"]}, {"qualifier": "Arrays", "member": "equals", "arguments": ["MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=120), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)], member=hsvToRgb, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "ArrayCreator(dimensions=[None], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int))"]}, {"qualifier": "", "member": "hsvToRgb", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=120)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)"]}, {"qualifier": "Arrays", "member": "equals", "arguments": ["MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=240), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)], member=hsvToRgb, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "ArrayCreator(dimensions=[None], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255)]), postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int))"]}, {"qualifier": "", "member": "hsvToRgb", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=240)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)"]}, {"qualifier": "Arrays", "member": "equals", "arguments": ["MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=300), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)], member=hsvToRgb, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "ArrayCreator(dimensions=[None], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255)]), postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int))"]}, {"qualifier": "", "member": "hsvToRgb", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=300)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)"]}, {"qualifier": "Arrays", "member": "equals", "arguments": ["MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=180), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5)], member=hsvToRgb, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "ArrayCreator(dimensions=[None], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=64), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=128), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=128)]), postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int))"]}, {"qualifier": "", "member": "hsvToRgb", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=180)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5)"]}, {"qualifier": "Arrays", "member": "equals", "arguments": ["MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=234), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.14), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.88)], member=hsvToRgb, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "ArrayCreator(dimensions=[None], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=193), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=196), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=224)]), postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int))"]}, {"qualifier": "", "member": "hsvToRgb", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=234)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.14)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.88)"]}, {"qualifier": "Arrays", "member": "equals", "arguments": ["MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=330), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.75), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5)], member=hsvToRgb, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "ArrayCreator(dimensions=[None], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=128), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=32), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=80)]), postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int))"]}, {"qualifier": "", "member": "hsvToRgb", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=330)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.75)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5)"]}, {"qualifier": "", "member": "approximatelyEqualHsv", "arguments": ["MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)], member=rgbToHsv, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "ArrayCreator(dimensions=[None], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)]), postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=double))"]}, {"qualifier": "", "member": "rgbToHsv", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)"]}, {"qualifier": "", "member": "approximatelyEqualHsv", "arguments": ["MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255)], member=rgbToHsv, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "ArrayCreator(dimensions=[None], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=double))"]}, {"qualifier": "", "member": "rgbToHsv", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255)"]}, {"qualifier": "", "member": "approximatelyEqualHsv", "arguments": ["MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)], member=rgbToHsv, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "ArrayCreator(dimensions=[None], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=double))"]}, {"qualifier": "", "member": "rgbToHsv", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)"]}, {"qualifier": "", "member": "approximatelyEqualHsv", "arguments": ["MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)], member=rgbToHsv, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "ArrayCreator(dimensions=[None], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=60), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=double))"]}, {"qualifier": "", "member": "rgbToHsv", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)"]}, {"qualifier": "", "member": "approximatelyEqualHsv", "arguments": ["MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)], member=rgbToHsv, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "ArrayCreator(dimensions=[None], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=120), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=double))"]}, {"qualifier": "", "member": "rgbToHsv", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)"]}, {"qualifier": "", "member": "approximatelyEqualHsv", "arguments": ["MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255)], member=rgbToHsv, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "ArrayCreator(dimensions=[None], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=240), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=double))"]}, {"qualifier": "", "member": "rgbToHsv", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255)"]}, {"qualifier": "", "member": "approximatelyEqualHsv", "arguments": ["MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255)], member=rgbToHsv, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "ArrayCreator(dimensions=[None], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=300), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=double))"]}, {"qualifier": "", "member": "rgbToHsv", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255)"]}, {"qualifier": "", "member": "approximatelyEqualHsv", "arguments": ["MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=64), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=128), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=128)], member=rgbToHsv, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "ArrayCreator(dimensions=[None], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=180), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5)]), postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=double))"]}, {"qualifier": "", "member": "rgbToHsv", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=64)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=128)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=128)"]}, {"qualifier": "", "member": "approximatelyEqualHsv", "arguments": ["MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=193), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=196), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=224)], member=rgbToHsv, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "ArrayCreator(dimensions=[None], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=234), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.14), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.88)]), postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=double))"]}, {"qualifier": "", "member": "rgbToHsv", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=193)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=196)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=224)"]}, {"qualifier": "", "member": "approximatelyEqualHsv", "arguments": ["MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=128), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=32), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=80)], member=rgbToHsv, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "ArrayCreator(dimensions=[None], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=330), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.75), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.5)]), postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=double))"]}, {"qualifier": "", "member": "rgbToHsv", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=128)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=32)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=80)"]}], "conditionals": []}, {"name": "hsvToRgb", "modifiers": ["public", "static"], "return_type": "int", "parameters": [{"name": "hue", "type": "double"}, {"name": "saturation", "type": "double"}, {"name": "value", "type": "double"}], "invocations": [{"qualifier": "Math", "member": "abs", "arguments": ["BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=hueSection, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=%), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)"]}, {"qualifier": "", "member": "getRgbBySection", "arguments": ["hueSection", "chroma", "matchValue", "secondLargestComponent"]}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=hue, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=<), operandr=BinaryOperation(operandl=MemberReference(member=hue, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=360), operator=>), operator=||)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=saturation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=<), operandr=BinaryOperation(operandl=MemberReference(member=saturation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=>), operator=||)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=<), operandr=BinaryOperation(operandl=MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=>), operator=||)", "has_else": false}]}, {"name": "rgbToHsv", "modifiers": ["public", "static"], "return_type": "double", "parameters": [{"name": "red", "type": "int"}, {"name": "green", "type": "int"}, {"name": "blue", "type": "int"}], "invocations": [{"qualifier": "Math", "member": "max", "arguments": ["MethodInvocation(arguments=[MemberReference(member=dRed, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=dGreen, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=max, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None)", "dBlue"]}, {"qualifier": "Math", "member": "max", "arguments": ["dRed", "dGreen"]}, {"qualifier": "Math", "member": "min", "arguments": ["MethodInvocation(arguments=[MemberReference(member=dRed, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=dGreen, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=min, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None)", "dBlue"]}, {"qualifier": "Math", "member": "min", "arguments": ["dRed", "dGreen"]}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=red, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=<), operandr=BinaryOperation(operandl=MemberReference(member=red, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255), operator=>), operator=||)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=green, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=<), operandr=BinaryOperation(operandl=MemberReference(member=green, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255), operator=>), operator=||)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=blue, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=<), operandr=BinaryOperation(operandl=MemberReference(member=blue, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255), operator=>), operator=||)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=chroma, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dRed, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=dGreen, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": true}]}, {"name": "approximatelyEqualHsv", "modifiers": ["static", "private"], "return_type": "boolean", "parameters": [{"name": "hsv1", "type": "double"}, {"name": "hsv2", "type": "double"}], "invocations": [{"qualifier": "Math", "member": "abs", "arguments": ["BinaryOperation(operandl=MemberReference(member=hsv1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0))]), operandr=MemberReference(member=hsv2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0))]), operator=-)"]}, {"qualifier": "Math", "member": "abs", "arguments": ["BinaryOperation(operandl=MemberReference(member=hsv1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1))]), operandr=MemberReference(member=hsv2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1))]), operator=-)"]}, {"qualifier": "Math", "member": "abs", "arguments": ["BinaryOperation(operandl=MemberReference(member=hsv1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2))]), operandr=MemberReference(member=hsv2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2))]), operator=-)"]}], "conditionals": []}, {"name": "getRgbBySection", "modifiers": ["static", "private"], "return_type": "int", "parameters": [{"name": "hueSection", "type": "double"}, {"name": "chroma", "type": "double"}, {"name": "matchValue", "type": "double"}, {"name": "secondLargestComponent", "type": "double"}], "invocations": [{"qualifier": "", "member": "convertToInt", "arguments": ["BinaryOperation(operandl=MemberReference(member=chroma, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=matchValue, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)"]}, {"qualifier": "", "member": "convertToInt", "arguments": ["BinaryOperation(operandl=MemberReference(member=secondLargestComponent, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=matchValue, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)"]}, {"qualifier": "", "member": "convertToInt", "arguments": ["matchValue"]}, {"qualifier": "", "member": "convertToInt", "arguments": ["BinaryOperation(operandl=MemberReference(member=secondLargestComponent, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=matchValue, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)"]}, {"qualifier": "", "member": "convertToInt", "arguments": ["BinaryOperation(operandl=MemberReference(member=chroma, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=matchValue, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)"]}, {"qualifier": "", "member": "convertToInt", "arguments": ["matchValue"]}, {"qualifier": "", "member": "convertToInt", "arguments": ["matchValue"]}, {"qualifier": "", "member": "convertToInt", "arguments": ["BinaryOperation(operandl=MemberReference(member=chroma, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=matchValue, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)"]}, {"qualifier": "", "member": "convertToInt", "arguments": ["BinaryOperation(operandl=MemberReference(member=secondLargestComponent, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=matchValue, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)"]}, {"qualifier": "", "member": "convertToInt", "arguments": ["matchValue"]}, {"qualifier": "", "member": "convertToInt", "arguments": ["BinaryOperation(operandl=MemberReference(member=secondLargestComponent, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=matchValue, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)"]}, {"qualifier": "", "member": "convertToInt", "arguments": ["BinaryOperation(operandl=MemberReference(member=chroma, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=matchValue, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)"]}, {"qualifier": "", "member": "convertToInt", "arguments": ["BinaryOperation(operandl=MemberReference(member=secondLargestComponent, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=matchValue, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)"]}, {"qualifier": "", "member": "convertToInt", "arguments": ["matchValue"]}, {"qualifier": "", "member": "convertToInt", "arguments": ["BinaryOperation(operandl=MemberReference(member=chroma, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=matchValue, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)"]}, {"qualifier": "", "member": "convertToInt", "arguments": ["BinaryOperation(operandl=MemberReference(member=chroma, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=matchValue, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)"]}, {"qualifier": "", "member": "convertToInt", "arguments": ["matchValue"]}, {"qualifier": "", "member": "convertToInt", "arguments": ["BinaryOperation(operandl=MemberReference(member=secondLargestComponent, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=matchValue, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)"]}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=hueSection, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=>=), operandr=BinaryOperation(operandl=MemberReference(member=hueSection, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=<=), operator=&&)", "has_else": true}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=hueSection, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=>), operandr=BinaryOperation(operandl=MemberReference(member=hueSection, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=<=), operator=&&)", "has_else": true}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=hueSection, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=>), operandr=BinaryOperation(operandl=MemberReference(member=hueSection, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), operator=<=), operator=&&)", "has_else": true}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=hueSection, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), operator=>), operandr=BinaryOperation(operandl=MemberReference(member=hueSection, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), operator=<=), operator=&&)", "has_else": true}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=hueSection, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), operator=>), operandr=BinaryOperation(operandl=MemberReference(member=hueSection, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), operator=<=), operator=&&)", "has_else": true}]}, {"name": "convertToInt", "modifiers": ["static", "private"], "return_type": "int", "parameters": [{"name": "input", "type": "double"}], "invocations": [{"qualifier": "Math", "member": "round", "arguments": ["BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255), operandr=MemberReference(member=input, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*)"]}], "conditionals": []}]}]}
```
Rules:
1. Use @Test from JUnit 5.
2. Resolve all the dependencies. Use Mockito (@Mock, Mockito.when(...), verify(...)) for all dependencies.
3. Instantiate focal class
4. Use @BeforeEach for setting up required preconditions before each test method And @AfterEach for cleanup. Use @BeforeAll (static) if setup is required once before all tests.
5. For each invocation:
Stub its behavior (when(mock.member(args)).thenReturn(...) for non-void; doNothing().when(...) and verify mehtod call for void ).
6. Use Arrange-Act-Assert format.
  -Arrange: Set up inputs, mocks, or stubs.
  -Act: Call the method under test.
  -Assert:  Verify the results.
7. Make all test methods public.
8. Import only what is necessary: JUnit 5, Mockito, and the class under test.
9. Return only a complete Java test class, no explanation.

result: ```java
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class ColorServiceTest {

    @InjectMocks
    private ColorService colorService;

    @Mock
    private ColorRepository colorRepository;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void getColors_whenNoColorsExist_shouldReturnEmptyList() {
        // Arrange
        when(colorRepository.findAll()).thenReturn(Arrays.asList());

        // Act
        List<Color> colors = colorService.getColors();

        // Assert
        assertTrue(colors.isEmpty());
    }

    @Test
    void getColors_whenColorsExist_shouldReturnListOfColors() {
        // Arrange
        when(colorRepository.findAll()).thenReturn(Arrays.asList(new Color("red"), new Color("blue")));

        // Act
        List<Color> colors = colorService.getColors();

        // Assert
        assertEquals(2, colors.size());
    }
}
```
