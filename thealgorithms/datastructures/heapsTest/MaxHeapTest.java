query: 
You are a Java testing assistant.
Below is a JSON array of method-metadata for the class under test. Your task is to generate a complete, idiomatic JUnit 5 unit test class for each following Java method:
```json
{"package": "com.thealgorithms.datastructures.heaps", "imports": ["java.util.ArrayList", "java.util.List"], "classes": [{"class_name": "MaxHeap", "modifiers": ["public"], "fields": [{"name": "maxHeap", "type": "List"}], "constructors": [{"parameters": [{"name": "listElements", "type": "List"}], "modifiers": ["public"]}], "methods": [{"name": "heapifyDown", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "elementIndex", "type": "int"}], "invocations": [{"qualifier": "maxHeap", "member": "size", "arguments": []}, {"qualifier": "maxHeap", "member": "get", "arguments": ["leftChild"]}, {"qualifier": null, "member": "getKey", "arguments": []}, {"qualifier": "maxHeap", "member": "get", "arguments": ["largest"]}, {"qualifier": null, "member": "getKey", "arguments": []}, {"qualifier": "maxHeap", "member": "size", "arguments": []}, {"qualifier": "maxHeap", "member": "get", "arguments": ["rightChild"]}, {"qualifier": null, "member": "getKey", "arguments": []}, {"qualifier": "maxHeap", "member": "get", "arguments": ["largest"]}, {"qualifier": null, "member": "getKey", "arguments": []}, {"qualifier": "maxHeap", "member": "get", "arguments": ["BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)"]}, {"qualifier": "maxHeap", "member": "set", "arguments": ["BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)", "MethodInvocation(arguments=[MemberReference(member=largest, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=maxHeap, selectors=[], type_arguments=None)"]}, {"qualifier": "maxHeap", "member": "get", "arguments": ["largest"]}, {"qualifier": "maxHeap", "member": "set", "arguments": ["largest", "swap"]}, {"qualifier": "", "member": "heapifyDown", "arguments": ["BinaryOperation(operandl=MemberReference(member=largest, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)"]}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=leftChild, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=maxHeap, selectors=[], type_arguments=None), operator=<), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=leftChild, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=maxHeap, selectors=[MethodInvocation(arguments=[], member=getKey, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), operandr=MethodInvocation(arguments=[MemberReference(member=largest, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=maxHeap, selectors=[MethodInvocation(arguments=[], member=getKey, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), operator=>), operator=&&)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=rightChild, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=maxHeap, selectors=[], type_arguments=None), operator=<), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=rightChild, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=maxHeap, selectors=[MethodInvocation(arguments=[], member=getKey, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), operandr=MethodInvocation(arguments=[MemberReference(member=largest, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=maxHeap, selectors=[MethodInvocation(arguments=[], member=getKey, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), operator=>), operator=&&)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=largest, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-), operator=!=)", "has_else": false}]}, {"name": "getElement", "modifiers": ["public"], "return_type": "HeapElement", "parameters": [{"name": "elementIndex", "type": "int"}], "invocations": [{"qualifier": "maxHeap", "member": "size", "arguments": []}, {"qualifier": "maxHeap", "member": "size", "arguments": []}, {"qualifier": "maxHeap", "member": "get", "arguments": ["BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)"]}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=<=), operandr=BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=maxHeap, selectors=[], type_arguments=None), operator=>), operator=||)", "has_else": false}]}, {"name": "getElementKey", "modifiers": ["private"], "return_type": "double", "parameters": [{"name": "elementIndex", "type": "int"}], "invocations": [{"qualifier": "maxHeap", "member": "size", "arguments": []}, {"qualifier": "maxHeap", "member": "size", "arguments": []}, {"qualifier": "maxHeap", "member": "get", "arguments": ["BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)"]}, {"qualifier": null, "member": "getKey", "arguments": []}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=<=), operandr=BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=maxHeap, selectors=[], type_arguments=None), operator=>), operator=||)", "has_else": false}]}, {"name": "swap", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "index1", "type": "int"}, {"name": "index2", "type": "int"}], "invocations": [{"qualifier": "maxHeap", "member": "get", "arguments": ["BinaryOperation(operandl=MemberReference(member=index1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)"]}, {"qualifier": "maxHeap", "member": "set", "arguments": ["BinaryOperation(operandl=MemberReference(member=index1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)", "MethodInvocation(arguments=[BinaryOperation(operandl=MemberReference(member=index2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)], member=get, postfix_operators=[], prefix_operators=[], qualifier=maxHeap, selectors=[], type_arguments=None)"]}, {"qualifier": "maxHeap", "member": "get", "arguments": ["BinaryOperation(operandl=MemberReference(member=index2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)"]}, {"qualifier": "maxHeap", "member": "set", "arguments": ["BinaryOperation(operandl=MemberReference(member=index2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)", "temporaryElement"]}], "conditionals": []}, {"name": "toggleUp", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "elementIndex", "type": "int"}], "invocations": [{"qualifier": "maxHeap", "member": "get", "arguments": ["BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)"]}, {"qualifier": null, "member": "getKey", "arguments": []}, {"qualifier": "", "member": "getElementKey", "arguments": ["Cast(expression=MethodInvocation(arguments=[BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/)], member=floor, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), type=BasicType(dimensions=[], name=int))"]}, {"qualifier": "Math", "member": "floor", "arguments": ["BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/)"]}, {"qualifier": "", "member": "swap", "arguments": ["elementIndex", "Cast(expression=MethodInvocation(arguments=[BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/)], member=floor, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), type=BasicType(dimensions=[], name=int))"]}, {"qualifier": "Math", "member": "floor", "arguments": ["BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/)"]}, {"qualifier": "Math", "member": "floor", "arguments": ["BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/)"]}], "conditionals": []}, {"name": "toggleDown", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "elementIndex", "type": "int"}], "invocations": [{"qualifier": "maxHeap", "member": "get", "arguments": ["BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)"]}, {"qualifier": null, "member": "getKey", "arguments": []}, {"qualifier": "maxHeap", "member": "size", "arguments": []}, {"qualifier": "", "member": "getElementKey", "arguments": ["BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=*)"]}, {"qualifier": "maxHeap", "member": "size", "arguments": []}, {"qualifier": "", "member": "getElementKey", "arguments": ["BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=*), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)"]}, {"qualifier": "maxHeap", "member": "size", "arguments": []}, {"qualifier": "maxHeap", "member": "size", "arguments": []}, {"qualifier": "", "member": "getElementKey", "arguments": ["BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=*), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)"]}, {"qualifier": "", "member": "getElementKey", "arguments": ["BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=*)"]}, {"qualifier": "", "member": "swap", "arguments": ["elementIndex", "largerChildIndex"]}, {"qualifier": "maxHeap", "member": "size", "arguments": []}, {"qualifier": "", "member": "getElementKey", "arguments": ["BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=*)"]}, {"qualifier": "maxHeap", "member": "size", "arguments": []}, {"qualifier": "", "member": "getElementKey", "arguments": ["BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=*), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)"]}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operandr=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+), operandr=MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=maxHeap, selectors=[], type_arguments=None), operator=<=), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=*), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)], member=getElementKey, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), operandr=MethodInvocation(arguments=[BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=*)], member=getElementKey, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), operator=>), operator=&&)", "has_else": true}]}, {"name": "extractMax", "modifiers": ["private"], "return_type": "HeapElement", "parameters": [], "invocations": [{"qualifier": "maxHeap", "member": "isEmpty", "arguments": []}, {"qualifier": "maxHeap", "member": "getFirst", "arguments": []}, {"qualifier": "", "member": "deleteElement", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)"]}], "conditionals": [{"condition": "MethodInvocation(arguments=[], member=isEmpty, postfix_operators=[], prefix_operators=[], qualifier=maxHeap, selectors=[], type_arguments=None)", "has_else": false}]}, {"name": "insertElement", "modifiers": ["public"], "return_type": "void", "parameters": [{"name": "element", "type": "HeapElement"}], "invocations": [{"qualifier": "maxHeap", "member": "add", "arguments": ["element"]}, {"qualifier": "", "member": "toggleUp", "arguments": ["MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=maxHeap, selectors=[], type_arguments=None)"]}, {"qualifier": "maxHeap", "member": "size", "arguments": []}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=element, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": false}]}, {"name": "deleteElement", "modifiers": ["public"], "return_type": "void", "parameters": [{"name": "elementIndex", "type": "int"}], "invocations": [{"qualifier": "maxHeap", "member": "isEmpty", "arguments": []}, {"qualifier": "maxHeap", "member": "size", "arguments": []}, {"qualifier": "maxHeap", "member": "size", "arguments": []}, {"qualifier": "maxHeap", "member": "set", "arguments": ["BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)", "MethodInvocation(arguments=[], member=getLast, postfix_operators=[], prefix_operators=[], qualifier=maxHeap, selectors=[], type_arguments=None)"]}, {"qualifier": "maxHeap", "member": "getLast", "arguments": []}, {"qualifier": "maxHeap", "member": "removeLast", "arguments": []}, {"qualifier": "maxHeap", "member": "isEmpty", "arguments": []}, {"qualifier": "maxHeap", "member": "size", "arguments": []}, {"qualifier": "", "member": "getElementKey", "arguments": ["elementIndex"]}, {"qualifier": "", "member": "getElementKey", "arguments": ["Cast(expression=MethodInvocation(arguments=[BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/)], member=floor, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), type=BasicType(dimensions=[], name=int))"]}, {"qualifier": "Math", "member": "floor", "arguments": ["BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/)"]}, {"qualifier": "", "member": "toggleUp", "arguments": ["elementIndex"]}, {"qualifier": "", "member": "toggleDown", "arguments": ["elementIndex"]}], "conditionals": [{"condition": "MethodInvocation(arguments=[], member=isEmpty, postfix_operators=[], prefix_operators=[], qualifier=maxHeap, selectors=[], type_arguments=None)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=maxHeap, selectors=[], type_arguments=None), operator=>), operandr=BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=<=), operator=||)", "has_else": false}, {"condition": "BinaryOperation(operandl=MethodInvocation(arguments=[], member=isEmpty, postfix_operators=[], prefix_operators=['!'], qualifier=maxHeap, selectors=[], type_arguments=None), operandr=BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=maxHeap, selectors=[], type_arguments=None), operator=<=), operator=&&)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=>), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getElementKey, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), operandr=MethodInvocation(arguments=[Cast(expression=MethodInvocation(arguments=[BinaryOperation(operandl=MemberReference(member=elementIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2.0), operator=/)], member=floor, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), type=BasicType(dimensions=[], name=int))], member=getElementKey, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), operator=>), operator=&&)", "has_else": true}]}, {"name": "getElement", "modifiers": ["public"], "return_type": "HeapElement", "parameters": [], "invocations": [{"qualifier": "", "member": "extractMax", "arguments": []}], "conditionals": []}, {"name": "size", "modifiers": ["public"], "return_type": "int", "parameters": [], "invocations": [{"qualifier": "maxHeap", "member": "size", "arguments": []}], "conditionals": []}, {"name": "isEmpty", "modifiers": ["public"], "return_type": "boolean", "parameters": [], "invocations": [{"qualifier": "maxHeap", "member": "isEmpty", "arguments": []}], "conditionals": []}]}]}
```
Rules:
1. Use @Test from JUnit 5.
2. Resolve all the dependencies. Use Mockito (@Mock, Mockito.when(...), verify(...)) for all dependencies.
3. Instantiate focal class
4. Use @BeforeEach for setting up required preconditions before each test method And @AfterEach for cleanup. Use @BeforeAll (static) if setup is required once before all tests.
5. For each invocation:
Stub its behavior (when(mock.member(args)).thenReturn(...) for non-void; doNothing().when(...) and verify mehtod call for void ).
6. Use Arrange-Act-Assert format.
  -Arrange: Set up inputs, mocks, or stubs.
  -Act: Call the method under test.
  -Assert:  Verify the results.
7. Make all test methods public.
8. Import only what is necessary: JUnit 5, Mockito, and the class under test.
9. Return only a complete Java test class, no explanation.

result: ```
package com.example;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class HeapTest {
    @Mock private Heap mockHeap;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void testInsertElement() {
        // Arrange
        when(mockHeap.size()).thenReturn(0);

        // Act
        mockHeap.insertElement(new HeapElement());

        // Assert
        verify(mockHeap, times(1)).add(any());
    }

    @Test
    void testDeleteElement() {
        // Arrange
        when(mockHeap.size()).thenReturn(1);

        // Act
        mockHeap.deleteElement();

        // Assert
        verify(mockHeap, times(1)).removeLast();
    }
}
```
