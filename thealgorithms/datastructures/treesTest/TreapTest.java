query: 
You are a Java testing assistant.
Below is a JSON array of method-metadata for the class under test. Your task is to generate a complete, idiomatic JUnit 5 unit test class for each following Java method:
```json
{"package": "com.thealgorithms.datastructures.trees", "imports": ["java.util.Random"], "classes": [{"class_name": "Treap", "modifiers": ["public"], "fields": [{"name": "root", "type": "TreapNode"}, {"name": "random", "type": "Random"}], "constructors": [{"parameters": [], "modifiers": ["public"]}], "methods": [{"name": "merge", "modifiers": ["private"], "return_type": "TreapNode", "parameters": [{"name": "left", "type": "TreapNode"}, {"name": "right", "type": "TreapNode"}], "invocations": [{"qualifier": "", "member": "merge", "arguments": ["right", "right"]}, {"qualifier": "left", "member": "updateSize", "arguments": []}, {"qualifier": "", "member": "merge", "arguments": ["left", "left"]}, {"qualifier": "right", "member": "updateSize", "arguments": []}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=right, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=priority, postfix_operators=[], prefix_operators=[], qualifier=left, selectors=[]), operandr=MemberReference(member=priority, postfix_operators=[], prefix_operators=[], qualifier=right, selectors=[]), operator=>)", "has_else": true}]}, {"name": "split", "modifiers": ["private"], "return_type": "TreapNode", "parameters": [{"name": "node", "type": "TreapNode"}, {"name": "key", "type": "int"}], "invocations": [{"qualifier": "", "member": "split", "arguments": ["right", "key"]}, {"qualifier": "node", "member": "updateSize", "arguments": []}, {"qualifier": "", "member": "split", "arguments": ["left", "key"]}, {"qualifier": "node", "member": "updateSize", "arguments": []}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=MemberReference(member=key, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<=)", "has_else": true}]}, {"name": "insert", "modifiers": ["public"], "return_type": "TreapNode", "parameters": [{"name": "value", "type": "int"}], "invocations": [{"qualifier": "random", "member": "nextInt", "arguments": []}, {"qualifier": "", "member": "split", "arguments": ["root", "value"]}, {"qualifier": "random", "member": "nextInt", "arguments": []}, {"qualifier": "", "member": "merge", "arguments": ["splitted", "node"]}, {"qualifier": "tempMerged", "member": "updateSize", "arguments": []}, {"qualifier": "", "member": "merge", "arguments": ["tempMerged", "splitted"]}, {"qualifier": "merged", "member": "updateSize", "arguments": []}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=root, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": false}]}, {"name": "delete", "modifiers": ["public"], "return_type": "TreapNode", "parameters": [{"name": "value", "type": "int"}], "invocations": [{"qualifier": "", "member": "deleteNode", "arguments": ["root", "value"]}], "conditionals": []}, {"name": "deleteNode", "modifiers": ["private"], "return_type": "TreapNode", "parameters": [{"name": "root", "type": "TreapNode"}, {"name": "value", "type": "int"}], "invocations": [{"qualifier": "", "member": "deleteNode", "arguments": ["left", "value"]}, {"qualifier": "", "member": "deleteNode", "arguments": ["right", "value"]}, {"qualifier": "", "member": "merge", "arguments": ["left", "right"]}, {"qualifier": "root", "member": "updateSize", "arguments": []}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=root, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=root, selectors=[]), operator=<)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=root, selectors=[]), operator=>)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=root, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=)", "has_else": false}]}, {"name": "inOrder", "modifiers": ["public"], "return_type": "void", "parameters": [], "invocations": [{"qualifier": "System.out", "member": "print", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"{\")"]}, {"qualifier": "", "member": "printInorder", "arguments": ["root"]}, {"qualifier": "System.out", "member": "print", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"}\")"]}], "conditionals": []}, {"name": "printInorder", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "root", "type": "TreapNode"}], "invocations": [{"qualifier": "", "member": "printInorder", "arguments": ["left"]}, {"qualifier": "System.out", "member": "print", "arguments": ["BinaryOperation(operandl=MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=root, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\",\"), operator=+)"]}, {"qualifier": "", "member": "printInorder", "arguments": ["right"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=root, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": false}]}, {"name": "preOrder", "modifiers": ["public"], "return_type": "void", "parameters": [], "invocations": [{"qualifier": "System.out", "member": "print", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"{\")"]}, {"qualifier": "", "member": "printPreOrder", "arguments": ["root"]}, {"qualifier": "System.out", "member": "print", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"}\")"]}], "conditionals": []}, {"name": "printPreOrder", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "root", "type": "TreapNode"}], "invocations": [{"qualifier": "System.out", "member": "print", "arguments": ["BinaryOperation(operandl=MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=root, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\",\"), operator=+)"]}, {"qualifier": "", "member": "printPreOrder", "arguments": ["left"]}, {"qualifier": "", "member": "printPreOrder", "arguments": ["right"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=root, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": false}]}, {"name": "postOrder", "modifiers": ["public"], "return_type": "void", "parameters": [], "invocations": [{"qualifier": "System.out", "member": "print", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"{\")"]}, {"qualifier": "", "member": "printPostOrder", "arguments": ["root"]}, {"qualifier": "System.out", "member": "print", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"}\")"]}], "conditionals": []}, {"name": "printPostOrder", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "root", "type": "TreapNode"}], "invocations": [{"qualifier": "", "member": "printPostOrder", "arguments": ["left"]}, {"qualifier": "", "member": "printPostOrder", "arguments": ["right"]}, {"qualifier": "System.out", "member": "print", "arguments": ["BinaryOperation(operandl=MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=root, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\",\"), operator=+)"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=root, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": false}]}, {"name": "search", "modifiers": ["public"], "return_type": "TreapNode", "parameters": [{"name": "value", "type": "int"}], "invocations": [{"qualifier": "", "member": "searchVal", "arguments": ["root", "value"]}], "conditionals": []}, {"name": "searchVal", "modifiers": ["private"], "return_type": "TreapNode", "parameters": [{"name": "root", "type": "TreapNode"}, {"name": "value", "type": "int"}], "invocations": [{"qualifier": "", "member": "searchVal", "arguments": ["right", "value"]}, {"qualifier": "", "member": "searchVal", "arguments": ["left", "value"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=root, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=root, selectors=[]), operandr=MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=root, selectors=[]), operandr=MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<)", "has_else": true}]}, {"name": "lowerBound", "modifiers": ["public"], "return_type": "TreapNode", "parameters": [{"name": "value", "type": "int"}], "invocations": [], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=current, selectors=[]), operandr=MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>=)", "has_else": true}]}, {"name": "upperBound", "modifiers": ["public"], "return_type": "TreapNode", "parameters": [{"name": "value", "type": "int"}], "invocations": [], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=current, selectors=[]), operandr=MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>)", "has_else": true}]}, {"name": "size", "modifiers": ["public"], "return_type": "int", "parameters": [], "invocations": [], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=root, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": false}]}, {"name": "isEmpty", "modifiers": ["public"], "return_type": "boolean", "parameters": [], "invocations": [], "conditionals": []}, {"name": "getRoot", "modifiers": ["public"], "return_type": "TreapNode", "parameters": [], "invocations": [], "conditionals": []}, {"name": "getLeft", "modifiers": ["public"], "return_type": "TreapNode", "parameters": [{"name": "node", "type": "TreapNode"}], "invocations": [], "conditionals": []}, {"name": "getRight", "modifiers": ["public"], "return_type": "TreapNode", "parameters": [{"name": "node", "type": "TreapNode"}], "invocations": [], "conditionals": []}, {"name": "toString", "modifiers": ["public"], "return_type": "String", "parameters": [{"name": "node", "type": "TreapNode"}], "invocations": [], "conditionals": []}]}]}
```
Rules:
1. Use @Test from JUnit 5.
2. Resolve all the dependencies. Use Mockito (@Mock, Mockito.when(...), verify(...)) for all dependencies.
3. Instantiate focal class
4. Use @BeforeEach for setting up required preconditions before each test method And @AfterEach for cleanup. Use @BeforeAll (static) if setup is required once before all tests.
5. For each invocation:
Stub its behavior (when(mock.member(args)).thenReturn(...) for non-void; doNothing().when(...) and verify mehtod call for void ).
6. Use Arrange-Act-Assert format.
  -Arrange: Set up inputs, mocks, or stubs.
  -Act: Call the method under test.
  -Assert:  Verify the results.
7. Make all test methods public.
8. Import only what is necessary: JUnit 5, Mockito, and the class under test.
9. Return only a complete Java test class, no explanation.

result: ```
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.mockito.Mockito.*;

class TreapTest {
    private Treap treap;
    private Random random;

    @BeforeEach
    void setUp() {
        this.treap = new Treap();
        this.random = mock(Random.class);
    }

    @Test
    void testInsert() {
        // Arrange
        int value = 10;
        when(this.random.nextInt()).thenReturn(value);

        // Act
        this.treap.insert(value);

        // Assert
        verify(this.random).nextInt();
    }

    @Test
    void testSearch() {
        // Arrange
        int value = 10;
        when(this.random.nextInt()).thenReturn(value);

        // Act
        this.treap.insert(value);
        TreapNode node = this.treap.searchVal(value);

        // Assert
        verify(this.random).nextInt();
        assertEquals(node, this.treap.getRoot());
    }
}
```
