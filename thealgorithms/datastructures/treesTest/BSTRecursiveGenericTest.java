query: 
You are a Java testing assistant.
Below is a JSON array of method-metadata for the class under test. Your task is to generate a complete, idiomatic JUnit 5 unit test class for each following Java method:
```json
{"package": "com.thealgorithms.datastructures.trees", "imports": ["java.util.ArrayList", "java.util.List"], "classes": [{"class_name": "BSTRecursiveGeneric", "modifiers": ["public"], "fields": [{"name": "root", "type": "Node"}], "constructors": [{"parameters": [], "modifiers": ["public"]}], "methods": [{"name": "main", "modifiers": ["public", "static"], "return_type": "void", "parameters": [{"name": "args", "type": "String"}], "invocations": [{"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Testing for integer data...\")"]}, {"qualifier": "integerTree", "member": "add", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5)"]}, {"qualifier": "integerTree", "member": "add", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10)"]}, {"qualifier": "integerTree", "member": "add", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=9)"]}, {"qualifier": "integerTree", "member": "find", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4)"]}, {"qualifier": "integerTree", "member": "find", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10)"]}, {"qualifier": "integerTree", "member": "remove", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=9)"]}, {"qualifier": "integerTree", "member": "find", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=9)"]}, {"qualifier": "integerTree", "member": "remove", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)"]}, {"qualifier": "integerTree", "member": "find", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)"]}, {"qualifier": "integerTree", "member": "add", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=20)"]}, {"qualifier": "integerTree", "member": "add", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=70)"]}, {"qualifier": "integerTree", "member": "find", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=70)"]}, {"qualifier": "integerTree", "member": "inorder", "arguments": []}, {"qualifier": "System.out", "member": "println", "arguments": []}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Testing for string data...\")"]}, {"qualifier": "stringTree", "member": "add", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"banana\")"]}, {"qualifier": "stringTree", "member": "add", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"pineapple\")"]}, {"qualifier": "stringTree", "member": "add", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"date\")"]}, {"qualifier": "stringTree", "member": "find", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"girl\")"]}, {"qualifier": "stringTree", "member": "find", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"pineapple\")"]}, {"qualifier": "stringTree", "member": "remove", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"date\")"]}, {"qualifier": "stringTree", "member": "find", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"date\")"]}, {"qualifier": "stringTree", "member": "remove", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"boy\")"]}, {"qualifier": "stringTree", "member": "find", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"boy\")"]}, {"qualifier": "stringTree", "member": "add", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"india\")"]}, {"qualifier": "stringTree", "member": "add", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"hills\")"]}, {"qualifier": "stringTree", "member": "find", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"hills\")"]}, {"qualifier": "stringTree", "member": "inorder", "arguments": []}], "conditionals": []}, {"name": "delete", "modifiers": ["private"], "return_type": "Node", "parameters": [{"name": "node", "type": "Node"}, {"name": "data", "type": "T"}], "invocations": [{"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"No such data present in BST.\")"]}, {"qualifier": "node.data", "member": "compareTo", "arguments": ["data"]}, {"qualifier": "", "member": "delete", "arguments": ["left", "data"]}, {"qualifier": "node.data", "member": "compareTo", "arguments": ["data"]}, {"qualifier": "", "member": "delete", "arguments": ["right", "data"]}, {"qualifier": "", "member": "delete", "arguments": ["right", "data"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=data, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=compareTo, postfix_operators=[], prefix_operators=[], qualifier=node.data, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=>)", "has_else": true}, {"condition": "BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=data, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=compareTo, postfix_operators=[], prefix_operators=[], qualifier=node.data, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=<)", "has_else": true}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=right, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), operandr=BinaryOperation(operandl=MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), operator=&&)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=right, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": true}]}, {"name": "insert", "modifiers": ["private"], "return_type": "Node", "parameters": [{"name": "node", "type": "Node"}, {"name": "data", "type": "T"}], "invocations": [{"qualifier": "node.data", "member": "compareTo", "arguments": ["data"]}, {"qualifier": "", "member": "insert", "arguments": ["left", "data"]}, {"qualifier": "node.data", "member": "compareTo", "arguments": ["data"]}, {"qualifier": "", "member": "insert", "arguments": ["right", "data"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=data, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=compareTo, postfix_operators=[], prefix_operators=[], qualifier=node.data, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=>)", "has_else": true}, {"condition": "BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=data, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=compareTo, postfix_operators=[], prefix_operators=[], qualifier=node.data, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=<)", "has_else": false}]}, {"name": "preOrder", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "node", "type": "Node"}], "invocations": [{"qualifier": "System.out", "member": "print", "arguments": ["BinaryOperation(operandl=MemberReference(member=data, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\" \"), operator=+)"]}, {"qualifier": "", "member": "preOrder", "arguments": ["left"]}, {"qualifier": "", "member": "preOrder", "arguments": ["right"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=right, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=)", "has_else": false}]}, {"name": "postOrder", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "node", "type": "Node"}], "invocations": [{"qualifier": "", "member": "postOrder", "arguments": ["left"]}, {"qualifier": "", "member": "postOrder", "arguments": ["right"]}, {"qualifier": "System.out", "member": "print", "arguments": ["BinaryOperation(operandl=MemberReference(member=data, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\" \"), operator=+)"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=right, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=)", "has_else": false}]}, {"name": "inOrder", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "node", "type": "Node"}], "invocations": [{"qualifier": "", "member": "inOrder", "arguments": ["left"]}, {"qualifier": "System.out", "member": "print", "arguments": ["BinaryOperation(operandl=MemberReference(member=data, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\" \"), operator=+)"]}, {"qualifier": "", "member": "inOrder", "arguments": ["right"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=right, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=)", "has_else": false}]}, {"name": "inOrderSort", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "node", "type": "Node"}, {"name": "sortedList", "type": "List"}], "invocations": [{"qualifier": "", "member": "inOrderSort", "arguments": ["left", "sortedList"]}, {"qualifier": "sortedList", "member": "add", "arguments": ["data"]}, {"qualifier": "", "member": "inOrderSort", "arguments": ["right", "sortedList"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=right, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=)", "has_else": false}]}, {"name": "search", "modifiers": ["private"], "return_type": "boolean", "parameters": [{"name": "node", "type": "Node"}, {"name": "data", "type": "T"}], "invocations": [{"qualifier": "node.data", "member": "compareTo", "arguments": ["data"]}, {"qualifier": "node.data", "member": "compareTo", "arguments": ["data"]}, {"qualifier": "", "member": "search", "arguments": ["left", "data"]}, {"qualifier": "", "member": "search", "arguments": ["right", "data"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=data, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=compareTo, postfix_operators=[], prefix_operators=[], qualifier=node.data, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=data, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=compareTo, postfix_operators=[], prefix_operators=[], qualifier=node.data, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=>)", "has_else": true}]}, {"name": "add", "modifiers": ["public"], "return_type": "void", "parameters": [{"name": "data", "type": "T"}], "invocations": [{"qualifier": "", "member": "insert", "arguments": ["This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=root, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)])", "data"]}], "conditionals": []}, {"name": "remove", "modifiers": ["public"], "return_type": "void", "parameters": [{"name": "data", "type": "T"}], "invocations": [{"qualifier": "", "member": "delete", "arguments": ["This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=root, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)])", "data"]}], "conditionals": []}, {"name": "inorder", "modifiers": ["public"], "return_type": "void", "parameters": [], "invocations": [{"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Inorder traversal of this tree is:\")"]}, {"qualifier": "", "member": "inOrder", "arguments": ["This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=root, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)])"]}, {"qualifier": "System.out", "member": "println", "arguments": []}], "conditionals": []}, {"name": "inorderSort", "modifiers": ["public"], "return_type": "List", "parameters": [], "invocations": [{"qualifier": "", "member": "inOrderSort", "arguments": ["This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=root, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)])", "sortedList"]}], "conditionals": []}, {"name": "postorder", "modifiers": ["public"], "return_type": "void", "parameters": [], "invocations": [{"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Postorder traversal of this tree is:\")"]}, {"qualifier": "", "member": "postOrder", "arguments": ["This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=root, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)])"]}, {"qualifier": "System.out", "member": "println", "arguments": []}], "conditionals": []}, {"name": "preorder", "modifiers": ["public"], "return_type": "void", "parameters": [], "invocations": [{"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Preorder traversal of this tree is:\")"]}, {"qualifier": "", "member": "preOrder", "arguments": ["This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=root, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)])"]}, {"qualifier": "System.out", "member": "println", "arguments": []}], "conditionals": []}, {"name": "find", "modifiers": ["public"], "return_type": "boolean", "parameters": [{"name": "data", "type": "T"}], "invocations": [{"qualifier": "", "member": "search", "arguments": ["This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=root, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)])", "data"]}, {"qualifier": "System.out", "member": "println", "arguments": ["BinaryOperation(operandl=MemberReference(member=data, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\" is present in given BST.\"), operator=+)"]}, {"qualifier": "System.out", "member": "println", "arguments": ["BinaryOperation(operandl=MemberReference(member=data, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\" not found.\"), operator=+)"]}], "conditionals": [{"condition": "MethodInvocation(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=root, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), MemberReference(member=data, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=search, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "has_else": false}]}]}]}
```
Rules:
1. Use @Test from JUnit 5.
2. Resolve all the dependencies. Use Mockito (@Mock, Mockito.when(...), verify(...)) for all dependencies.
3. Instantiate focal class
4. Use @BeforeEach for setting up required preconditions before each test method And @AfterEach for cleanup. Use @BeforeAll (static) if setup is required once before all tests.
5. For each invocation:
Stub its behavior (when(mock.member(args)).thenReturn(...) for non-void; doNothing().when(...) and verify mehtod call for void ).
6. Use Arrange-Act-Assert format.
  -Arrange: Set up inputs, mocks, or stubs.
  -Act: Call the method under test.
  -Assert:  Verify the results.
7. Make all test methods public.
8. Import only what is necessary: JUnit 5, Mockito, and the class under test.
9. Return only a complete Java test class, no explanation.

result: ```
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.mockito.Mockito.*;

class BinarySearchTreeTest {
    private BinarySearchTree<Integer> bst;

    @BeforeEach
    void setUp() {
        bst = new BinarySearchTree<>();
    }

    @Test
    void add_shouldInsertNodeIntoBST() {
        // Arrange
        Integer data = 10;
        when(bst.insert(data)).thenReturn(true);

        // Act
        bst.add(data);

        // Assert
        verify(bst).insert(data);
    }

    @Test
    void remove_shouldRemoveNodeFromBST() {
        // Arrange
        Integer data = 10;
        when(bst.delete(data)).thenReturn(true);

        // Act
        bst.remove(data);

        // Assert
        verify(bst).delete(data);
    }

    @Test
    void find_shouldFindNodeInBST() {
        // Arrange
        Integer data = 10;
        when(bst.search(data)).thenReturn(true);

        // Act
        boolean found = bst.find(data);

        // Assert
        verify(bst).search(data);
        assertTrue(found);
    }
}
```
