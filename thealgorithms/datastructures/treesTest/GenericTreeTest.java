query: 
You are a Java testing assistant.
Below is a JSON array of method-metadata for the class under test. Your task is to generate a complete, idiomatic JUnit 5 unit test class for each following Java method:
```json
{"package": "com.thealgorithms.datastructures.trees", "imports": ["java.util.ArrayList", "java.util.LinkedList", "java.util.Scanner"], "classes": [{"class_name": "GenericTree", "modifiers": ["public"], "fields": [{"name": "root", "type": "Node"}], "constructors": [{"parameters": [], "modifiers": ["public"]}], "methods": [{"name": "createTreeG", "modifiers": ["private"], "return_type": "Node", "parameters": [{"name": "node", "type": "Node"}, {"name": "childIndex", "type": "int"}, {"name": "scanner", "type": "Scanner"}], "invocations": [{"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Enter root's data\")"]}, {"qualifier": "System.out", "member": "println", "arguments": ["BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Enter data of parent of index \"), operandr=MemberReference(member=data, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\" \"), operator=+), operandr=MemberReference(member=childIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)"]}, {"qualifier": "scanner", "member": "nextInt", "arguments": []}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"number of children\")"]}, {"qualifier": "scanner", "member": "nextInt", "arguments": []}, {"qualifier": "", "member": "createTreeG", "arguments": ["node", "i", "scanner"]}, {"qualifier": "node.child", "member": "add", "arguments": ["child"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": true}]}, {"name": "display", "modifiers": ["public"], "return_type": "void", "parameters": [], "invocations": [{"qualifier": "", "member": "display1", "arguments": ["root"]}], "conditionals": []}, {"name": "display1", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "parent", "type": "Node"}], "invocations": [{"qualifier": "System.out", "member": "print", "arguments": ["BinaryOperation(operandl=MemberReference(member=data, postfix_operators=[], prefix_operators=[], qualifier=parent, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"=>\"), operator=+)"]}, {"qualifier": "parent.child", "member": "size", "arguments": []}, {"qualifier": "System.out", "member": "print", "arguments": ["BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=parent.child, selectors=[MemberReference(member=data, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\" \"), operator=+)"]}, {"qualifier": "parent.child", "member": "get", "arguments": ["i"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\".\")"]}, {"qualifier": "parent.child", "member": "size", "arguments": []}, {"qualifier": "", "member": "display1", "arguments": ["MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=parent.child, selectors=[], type_arguments=None)"]}, {"qualifier": "parent.child", "member": "get", "arguments": ["i"]}], "conditionals": []}, {"name": "size2call", "modifiers": ["public"], "return_type": "int", "parameters": [], "invocations": [{"qualifier": "", "member": "size2", "arguments": ["root"]}], "conditionals": []}, {"name": "size2", "modifiers": ["public"], "return_type": "int", "parameters": [{"name": "roott", "type": "Node"}], "invocations": [{"qualifier": "roott.child", "member": "size", "arguments": []}, {"qualifier": "", "member": "size2", "arguments": ["MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=roott.child, selectors=[], type_arguments=None)"]}, {"qualifier": "roott.child", "member": "get", "arguments": ["i"]}], "conditionals": []}, {"name": "maxcall", "modifiers": ["public"], "return_type": "int", "parameters": [], "invocations": [{"qualifier": "", "member": "max", "arguments": ["root", "maxi"]}], "conditionals": []}, {"name": "max", "modifiers": ["private"], "return_type": "int", "parameters": [{"name": "roott", "type": "Node"}, {"name": "maxi", "type": "int"}], "invocations": [{"qualifier": "roott.child", "member": "size", "arguments": []}, {"qualifier": "", "member": "max", "arguments": ["MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=roott.child, selectors=[], type_arguments=None)", "maxi"]}, {"qualifier": "roott.child", "member": "get", "arguments": ["i"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=maxi, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=data, postfix_operators=[], prefix_operators=[], qualifier=roott, selectors=[]), operator=<)", "has_else": false}]}, {"name": "heightcall", "modifiers": ["public"], "return_type": "int", "parameters": [], "invocations": [{"qualifier": "", "member": "height", "arguments": ["root"]}], "conditionals": []}, {"name": "height", "modifiers": ["private"], "return_type": "int", "parameters": [{"name": "node", "type": "Node"}], "invocations": [{"qualifier": "node.child", "member": "size", "arguments": []}, {"qualifier": "", "member": "height", "arguments": ["MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=node.child, selectors=[], type_arguments=None)"]}, {"qualifier": "node.child", "member": "get", "arguments": ["i"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=k, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=h, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>)", "has_else": false}]}, {"name": "findcall", "modifiers": ["public"], "return_type": "boolean", "parameters": [{"name": "info", "type": "int"}], "invocations": [{"qualifier": "", "member": "find", "arguments": ["root", "info"]}], "conditionals": []}, {"name": "find", "modifiers": ["private"], "return_type": "boolean", "parameters": [{"name": "node", "type": "Node"}, {"name": "info", "type": "int"}], "invocations": [{"qualifier": "node.child", "member": "size", "arguments": []}, {"qualifier": "", "member": "find", "arguments": ["MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=node.child, selectors=[], type_arguments=None)", "info"]}, {"qualifier": "node.child", "member": "get", "arguments": ["i"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=data, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=MemberReference(member=info, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": false}, {"condition": "MethodInvocation(arguments=[MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=node.child, selectors=[], type_arguments=None), MemberReference(member=info, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=find, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "has_else": false}]}, {"name": "depthcaller", "modifiers": ["public"], "return_type": "void", "parameters": [{"name": "dep", "type": "int"}], "invocations": [{"qualifier": "", "member": "depth", "arguments": ["root", "dep"]}], "conditionals": []}, {"name": "depth", "modifiers": ["public"], "return_type": "void", "parameters": [{"name": "node", "type": "Node"}, {"name": "dep", "type": "int"}], "invocations": [{"qualifier": "System.out", "member": "println", "arguments": ["data"]}, {"qualifier": "node.child", "member": "size", "arguments": []}, {"qualifier": "", "member": "depth", "arguments": ["MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=node.child, selectors=[], type_arguments=None)", "BinaryOperation(operandl=MemberReference(member=dep, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)"]}, {"qualifier": "node.child", "member": "get", "arguments": ["i"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=dep, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator===)", "has_else": false}]}, {"name": "preordercall", "modifiers": ["public"], "return_type": "void", "parameters": [], "invocations": [{"qualifier": "", "member": "preorder", "arguments": ["root"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\".\")"]}], "conditionals": []}, {"name": "preorder", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "node", "type": "Node"}], "invocations": [{"qualifier": "System.out", "member": "print", "arguments": ["BinaryOperation(operandl=MemberReference(member=data, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\" \"), operator=+)"]}, {"qualifier": "node.child", "member": "size", "arguments": []}, {"qualifier": "", "member": "preorder", "arguments": ["MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=node.child, selectors=[], type_arguments=None)"]}, {"qualifier": "node.child", "member": "get", "arguments": ["i"]}], "conditionals": []}, {"name": "postordercall", "modifiers": ["public"], "return_type": "void", "parameters": [], "invocations": [{"qualifier": "", "member": "postorder", "arguments": ["root"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\".\")"]}], "conditionals": []}, {"name": "postorder", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "node", "type": "Node"}], "invocations": [{"qualifier": "node.child", "member": "size", "arguments": []}, {"qualifier": "", "member": "postorder", "arguments": ["MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=node.child, selectors=[], type_arguments=None)"]}, {"qualifier": "node.child", "member": "get", "arguments": ["i"]}, {"qualifier": "System.out", "member": "print", "arguments": ["BinaryOperation(operandl=MemberReference(member=data, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\" \"), operator=+)"]}], "conditionals": []}, {"name": "levelorder", "modifiers": ["public"], "return_type": "void", "parameters": [], "invocations": [{"qualifier": "q", "member": "addLast", "arguments": ["root"]}, {"qualifier": "q", "member": "isEmpty", "arguments": []}, {"qualifier": "q", "member": "getFirst", "arguments": []}, {"qualifier": "System.out", "member": "print", "arguments": ["BinaryOperation(operandl=MemberReference(member=k, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\" \"), operator=+)"]}, {"qualifier": "q", "member": "getFirst", "arguments": []}, {"qualifier": null, "member": "size", "arguments": []}, {"qualifier": "q", "member": "addLast", "arguments": ["MethodInvocation(arguments=[], member=getFirst, postfix_operators=[], prefix_operators=[], qualifier=q, selectors=[MemberReference(member=child, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None)"]}, {"qualifier": "q", "member": "getFirst", "arguments": []}, {"qualifier": null, "member": "get", "arguments": ["i"]}, {"qualifier": "q", "member": "removeFirst", "arguments": []}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\".\")"]}], "conditionals": []}, {"name": "removeleavescall", "modifiers": ["public"], "return_type": "void", "parameters": [], "invocations": [{"qualifier": "", "member": "removeleaves", "arguments": ["root"]}], "conditionals": []}, {"name": "removeleaves", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "node", "type": "Node"}], "invocations": [{"qualifier": "node.child", "member": "size", "arguments": []}, {"qualifier": "node.child", "member": "get", "arguments": ["i"]}, {"qualifier": null, "member": "size", "arguments": []}, {"qualifier": "arr", "member": "add", "arguments": ["i"]}, {"qualifier": "", "member": "removeleaves", "arguments": ["MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=node.child, selectors=[], type_arguments=None)"]}, {"qualifier": "node.child", "member": "get", "arguments": ["i"]}, {"qualifier": "arr", "member": "size", "arguments": []}, {"qualifier": "node.child", "member": "remove", "arguments": ["BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=arr, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=+)"]}, {"qualifier": "arr", "member": "get", "arguments": ["i"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=node.child, selectors=[MemberReference(member=child, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[], member=size, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator===)", "has_else": true}]}]}]}
```
Rules:
1. Use @Test from JUnit 5.
2. Resolve all the dependencies. Use Mockito (@Mock, Mockito.when(...), verify(...)) for all dependencies.
3. Instantiate focal class
4. Use @BeforeEach for setting up required preconditions before each test method And @AfterEach for cleanup. Use @BeforeAll (static) if setup is required once before all tests.
5. For each invocation:
Stub its behavior (when(mock.member(args)).thenReturn(...) for non-void; doNothing().when(...) and verify mehtod call for void ).
6. Use Arrange-Act-Assert format.
  -Arrange: Set up inputs, mocks, or stubs.
  -Act: Call the method under test.
  -Assert:  Verify the results.
7. Make all test methods public.
8. Import only what is necessary: JUnit 5, Mockito, and the class under test.
9. Return only a complete Java test class, no explanation.

result: Here's an example of how you could write unit tests for the `Tree` class using JUnit 5 and Mockito:
```
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class TreeTest {

    @Mock
    private List<Integer> list;

    private Tree tree;

    @BeforeEach
    public void setUp() {
        this.tree = new Tree();
    }

    @Test
    public void testAddNode() {
        // Arrange
        int nodeValue = 10;
        when(list.size()).thenReturn(1);
        doNothing().when(list).add(nodeValue);

        // Act
        tree.addNode(nodeValue);

        // Assert
        verify(list, times(1)).add(nodeValue);
    }

    @Test
    public void testGetRoot() {
        // Arrange
        int rootValue = 10;
        when(list.size()).thenReturn(1);
        doNothing().when(list).add(rootValue);

        // Act
        tree.getRoot();

        // Assert
        verify(list, times(1)).get(0);
    }
}
```
In this example, we use the `@Mock` annotation to create a mock object for the `List<Integer>` class and then use Mockito's `when()` and `doNothing()` methods to stub its behavior. We also use JUnit 5's `Assertions` class to verify that the method calls are made correctly.

Note that this is just an example, you may need to adjust it according to your specific needs.
