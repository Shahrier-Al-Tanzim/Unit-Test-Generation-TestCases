query: 
You are a Java testing assistant.
Below is a JSON array of method-metadata for the class under test. Your task is to generate a complete, idiomatic JUnit 5 unit test class for each following Java method:
```json
{"package": "com.thealgorithms.datastructures.trees", "imports": ["java.util.ArrayList", "java.util.List"], "classes": [{"class_name": "AVLTree", "modifiers": ["public"], "fields": [{"name": "root", "type": "Node"}], "constructors": [], "methods": [{"name": "insert", "modifiers": ["public"], "return_type": "boolean", "parameters": [{"name": "key", "type": "int"}], "invocations": [{"qualifier": "", "member": "rebalance", "arguments": ["parent"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=root, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=key, postfix_operators=[], prefix_operators=[], qualifier=n, selectors=[]), operandr=MemberReference(member=key, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": false}, {"condition": "MemberReference(member=goLeft, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])", "has_else": true}]}, {"name": "delete", "modifiers": ["public"], "return_type": "void", "parameters": [{"name": "delKey", "type": "int"}], "invocations": [{"qualifier": "", "member": "delete", "arguments": ["node"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=root, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=delKey, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=key, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operator===)", "has_else": false}]}, {"name": "delete", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "node", "type": "Node"}], "invocations": [{"qualifier": "", "member": "rebalance", "arguments": ["parent"]}, {"qualifier": "", "member": "delete", "arguments": ["child"]}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), operandr=BinaryOperation(operandl=MemberReference(member=right, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), operator=&&)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=parent, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=parent, selectors=[]), operandr=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=)", "has_else": true}]}, {"name": "returnBalance", "modifiers": ["public"], "return_type": "List", "parameters": [], "invocations": [{"qualifier": "", "member": "returnBalance", "arguments": ["root", "balances"]}], "conditionals": []}, {"name": "returnBalance", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "n", "type": "Node"}, {"name": "balances", "type": "List"}], "invocations": [{"qualifier": "", "member": "returnBalance", "arguments": ["left", "balances"]}, {"qualifier": "balances", "member": "add", "arguments": ["MethodInvocation(arguments=[], member=getBalance, postfix_operators=[], prefix_operators=[], qualifier=n, selectors=[], type_arguments=None)"]}, {"qualifier": "n", "member": "getBalance", "arguments": []}, {"qualifier": "", "member": "returnBalance", "arguments": ["right", "balances"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=)", "has_else": false}]}, {"name": "search", "modifiers": ["public"], "return_type": "boolean", "parameters": [{"name": "key", "type": "int"}], "invocations": [{"qualifier": "", "member": "searchHelper", "arguments": ["This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=root, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)])", "key"]}], "conditionals": []}, {"name": "searchHelper", "modifiers": ["private"], "return_type": "Node", "parameters": [{"name": "root", "type": "Node"}, {"name": "key", "type": "int"}], "invocations": [{"qualifier": "", "member": "searchHelper", "arguments": ["left", "key"]}, {"qualifier": "", "member": "searchHelper", "arguments": ["right", "key"]}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=root, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), operandr=BinaryOperation(operandl=MemberReference(member=key, postfix_operators=[], prefix_operators=[], qualifier=root, selectors=[]), operandr=MemberReference(member=key, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), operator=||)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=key, postfix_operators=[], prefix_operators=[], qualifier=root, selectors=[]), operandr=MemberReference(member=key, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>)", "has_else": false}]}, {"name": "rebalance", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "n", "type": "Node"}], "invocations": [{"qualifier": "", "member": "setBalance", "arguments": ["n"]}, {"qualifier": "", "member": "height", "arguments": ["left"]}, {"qualifier": "", "member": "height", "arguments": ["right"]}, {"qualifier": "", "member": "rotateRight", "arguments": ["n"]}, {"qualifier": "", "member": "rotateLeftThenRight", "arguments": ["n"]}, {"qualifier": "", "member": "height", "arguments": ["right"]}, {"qualifier": "", "member": "height", "arguments": ["left"]}, {"qualifier": "", "member": "rotateLeft", "arguments": ["n"]}, {"qualifier": "", "member": "rotateRightThenLeft", "arguments": ["n"]}, {"qualifier": "", "member": "rebalance", "arguments": ["parent"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=balance, postfix_operators=[], prefix_operators=[], qualifier=n, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=2), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=n.left, selectors=[])], member=height, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), operandr=MethodInvocation(arguments=[MemberReference(member=right, postfix_operators=[], prefix_operators=[], qualifier=n.left, selectors=[])], member=height, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), operator=>=)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=balance, postfix_operators=[], prefix_operators=[], qualifier=n, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator===)", "has_else": false}, {"condition": "BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=right, postfix_operators=[], prefix_operators=[], qualifier=n.right, selectors=[])], member=height, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), operandr=MethodInvocation(arguments=[MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=n.right, selectors=[])], member=height, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), operator=>=)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=parent, postfix_operators=[], prefix_operators=[], qualifier=n, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=)", "has_else": true}]}, {"name": "rotateLeft", "modifiers": ["private"], "return_type": "Node", "parameters": [{"name": "a", "type": "Node"}], "invocations": [{"qualifier": "", "member": "setBalance", "arguments": ["a", "b"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=right, postfix_operators=[], prefix_operators=[], qualifier=a, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=parent, postfix_operators=[], prefix_operators=[], qualifier=b, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=right, postfix_operators=[], prefix_operators=[], qualifier=b.parent, selectors=[]), operandr=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": true}]}, {"name": "rotateRight", "modifiers": ["private"], "return_type": "Node", "parameters": [{"name": "a", "type": "Node"}], "invocations": [{"qualifier": "", "member": "setBalance", "arguments": ["a", "b"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=a, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=parent, postfix_operators=[], prefix_operators=[], qualifier=b, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=right, postfix_operators=[], prefix_operators=[], qualifier=b.parent, selectors=[]), operandr=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": true}]}, {"name": "rotateLeftThenRight", "modifiers": ["private"], "return_type": "Node", "parameters": [{"name": "n", "type": "Node"}], "invocations": [{"qualifier": "", "member": "rotateLeft", "arguments": ["left"]}, {"qualifier": "", "member": "rotateRight", "arguments": ["n"]}], "conditionals": []}, {"name": "rotateRightThenLeft", "modifiers": ["private"], "return_type": "Node", "parameters": [{"name": "n", "type": "Node"}], "invocations": [{"qualifier": "", "member": "rotateRight", "arguments": ["right"]}, {"qualifier": "", "member": "rotateLeft", "arguments": ["n"]}], "conditionals": []}, {"name": "height", "modifiers": ["private"], "return_type": "int", "parameters": [{"name": "n", "type": "Node"}], "invocations": [], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=n, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": false}]}, {"name": "setBalance", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "nodes", "type": "Node"}], "invocations": [{"qualifier": "", "member": "reheight", "arguments": ["n"]}, {"qualifier": "", "member": "height", "arguments": ["right"]}, {"qualifier": "", "member": "height", "arguments": ["left"]}], "conditionals": []}, {"name": "reheight", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "node", "type": "Node"}], "invocations": [{"qualifier": "Math", "member": "max", "arguments": ["MethodInvocation(arguments=[MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[])], member=height, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "MethodInvocation(arguments=[MemberReference(member=right, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[])], member=height, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)"]}, {"qualifier": "", "member": "height", "arguments": ["left"]}, {"qualifier": "", "member": "height", "arguments": ["right"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=)", "has_else": false}]}]}]}
```
Rules:
1. Use @Test from JUnit 5.
2. Resolve all the dependencies. Use Mockito (@Mock, Mockito.when(...), verify(...)) for all dependencies.
3. Instantiate focal class
4. Use @BeforeEach for setting up required preconditions before each test method And @AfterEach for cleanup. Use @BeforeAll (static) if setup is required once before all tests.
5. For each invocation:
Stub its behavior (when(mock.member(args)).thenReturn(...) for non-void; doNothing().when(...) and verify mehtod call for void ).
6. Use Arrange-Act-Assert format.
  -Arrange: Set up inputs, mocks, or stubs.
  -Act: Call the method under test.
  -Assert:  Verify the results.
7. Make all test methods public.
8. Import only what is necessary: JUnit 5, Mockito, and the class under test.
9. Return only a complete Java test class, no explanation.

result: ```
package com.example;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class MyTest {
    @Mock
    private Dependency1 mockDependency1;

    @Mock
    private Dependency2 mockDependency2;

    @InjectMocks
    private MyClass myClass;

    @BeforeEach
    public void setUp() {
        // Arrange
        when(mockDependency1.method1()).thenReturn("value");
        when(mockDependency2.method2()).thenReturn("value");
    }

    @Test
    public void testMethod() {
        // Act
        String result = myClass.method();

        // Assert
        assertEquals("expected", result);
    }
}
```
