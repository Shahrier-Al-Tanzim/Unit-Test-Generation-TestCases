query: 
You are a Java testing assistant.
Below is a JSON array of method-metadata for the class under test. Your task is to generate a complete, idiomatic JUnit 5 unit test class for each following Java method:
```json
{"package": "com.thealgorithms.datastructures.trees", "imports": ["java.util.Scanner"], "classes": [{"class_name": "RedBlackBST", "modifiers": ["public"], "fields": [{"name": "RED", "type": "int"}, {"name": "BLACK", "type": "int"}, {"name": "nil", "type": "Node"}, {"name": "root", "type": "Node"}], "constructors": [], "methods": [{"name": "printTree", "modifiers": ["public"], "return_type": "void", "parameters": [{"name": "node", "type": "Node"}], "invocations": [{"qualifier": "", "member": "printTree", "arguments": ["left"]}, {"qualifier": "System.out", "member": "print", "arguments": ["BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=TernaryExpression(condition=BinaryOperation(operandl=MemberReference(member=color, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=MemberReference(member=RED, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), if_false=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\" B \"), if_true=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\" R \")), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Key: \"), operator=+), operandr=MemberReference(member=key, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\" Parent: \"), operator=+), operandr=MemberReference(member=key, postfix_operators=[], prefix_operators=[], qualifier=node.p, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"\\n\"), operator=+)"]}, {"qualifier": "", "member": "printTree", "arguments": ["right"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=nil, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": false}]}, {"name": "printTreepre", "modifiers": ["public"], "return_type": "void", "parameters": [{"name": "node", "type": "Node"}], "invocations": [{"qualifier": "System.out", "member": "print", "arguments": ["BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=TernaryExpression(condition=BinaryOperation(operandl=MemberReference(member=color, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=MemberReference(member=RED, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), if_false=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\" B \"), if_true=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\" R \")), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Key: \"), operator=+), operandr=MemberReference(member=key, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\" Parent: \"), operator=+), operandr=MemberReference(member=key, postfix_operators=[], prefix_operators=[], qualifier=node.p, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"\\n\"), operator=+)"]}, {"qualifier": "", "member": "printTreepre", "arguments": ["left"]}, {"qualifier": "", "member": "printTreepre", "arguments": ["right"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=nil, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": false}]}, {"name": "findNode", "modifiers": ["private"], "return_type": "Node", "parameters": [{"name": "findNode", "type": "Node"}, {"name": "node", "type": "Node"}], "invocations": [{"qualifier": "", "member": "findNode", "arguments": ["findNode", "left"]}, {"qualifier": "", "member": "findNode", "arguments": ["findNode", "right"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=root, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=nil, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=key, postfix_operators=[], prefix_operators=[], qualifier=findNode, selectors=[]), operandr=MemberReference(member=key, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operator=<)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=MemberReference(member=nil, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=key, postfix_operators=[], prefix_operators=[], qualifier=findNode, selectors=[]), operandr=MemberReference(member=key, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operator=>)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=right, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=MemberReference(member=nil, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=key, postfix_operators=[], prefix_operators=[], qualifier=findNode, selectors=[]), operandr=MemberReference(member=key, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operator===)", "has_else": false}]}, {"name": "insert", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "node", "type": "Node"}], "invocations": [{"qualifier": "", "member": "fixTree", "arguments": ["node"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=root, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=nil, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=key, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=MemberReference(member=key, postfix_operators=[], prefix_operators=[], qualifier=temp, selectors=[]), operator=<)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=temp, selectors=[]), operandr=MemberReference(member=nil, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=key, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=MemberReference(member=key, postfix_operators=[], prefix_operators=[], qualifier=temp, selectors=[]), operator=>=)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=right, postfix_operators=[], prefix_operators=[], qualifier=temp, selectors=[]), operandr=MemberReference(member=nil, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": true}]}, {"name": "fixTree", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "node", "type": "Node"}], "invocations": [{"qualifier": "", "member": "rotateLeft", "arguments": ["node"]}, {"qualifier": "", "member": "rotateRight", "arguments": ["p"]}, {"qualifier": "", "member": "rotateRight", "arguments": ["node"]}, {"qualifier": "", "member": "rotateLeft", "arguments": ["p"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=p, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=node.p.p, selectors=[]), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=nil, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=), operandr=BinaryOperation(operandl=MemberReference(member=color, postfix_operators=[], prefix_operators=[], qualifier=y, selectors=[]), operandr=MemberReference(member=RED, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), operator=&&)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=right, postfix_operators=[], prefix_operators=[], qualifier=node.p, selectors=[]), operator===)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=nil, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=), operandr=BinaryOperation(operandl=MemberReference(member=color, postfix_operators=[], prefix_operators=[], qualifier=y, selectors=[]), operandr=MemberReference(member=RED, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), operator=&&)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=node.p, selectors=[]), operator===)", "has_else": false}]}, {"name": "rotateLeft", "modifiers": [], "return_type": "void", "parameters": [{"name": "node", "type": "Node"}], "invocations": [], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=p, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=MemberReference(member=nil, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=node.p, selectors=[]), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=node.right, selectors=[]), operandr=MemberReference(member=nil, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=)", "has_else": false}]}, {"name": "rotateRight", "modifiers": [], "return_type": "void", "parameters": [{"name": "node", "type": "Node"}], "invocations": [], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=p, postfix_operators=[], prefix_operators=[], qualifier=node, selectors=[]), operandr=MemberReference(member=nil, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=node.p, selectors=[]), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=right, postfix_operators=[], prefix_operators=[], qualifier=node.left, selectors=[]), operandr=MemberReference(member=nil, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=)", "has_else": false}]}, {"name": "transplant", "modifiers": [], "return_type": "void", "parameters": [{"name": "target", "type": "Node"}, {"name": "with", "type": "Node"}], "invocations": [], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=p, postfix_operators=[], prefix_operators=[], qualifier=target, selectors=[]), operandr=MemberReference(member=nil, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=target, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=target.p, selectors=[]), operator===)", "has_else": true}]}, {"name": "treeMinimum", "modifiers": [], "return_type": "Node", "parameters": [{"name": "subTreeRoot", "type": "Node"}], "invocations": [], "conditionals": []}, {"name": "delete", "modifiers": [], "return_type": "boolean", "parameters": [{"name": "z", "type": "Node"}], "invocations": [{"qualifier": "", "member": "findNode", "arguments": ["z", "root"]}, {"qualifier": "", "member": "transplant", "arguments": ["z", "right"]}, {"qualifier": "", "member": "transplant", "arguments": ["z", "left"]}, {"qualifier": "", "member": "treeMinimum", "arguments": ["right"]}, {"qualifier": "", "member": "transplant", "arguments": ["y", "right"]}, {"qualifier": "", "member": "transplant", "arguments": ["z", "y"]}, {"qualifier": "", "member": "deleteFixup", "arguments": ["x"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=z, selectors=[]), operandr=MemberReference(member=nil, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=right, postfix_operators=[], prefix_operators=[], qualifier=z, selectors=[]), operandr=MemberReference(member=nil, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=p, postfix_operators=[], prefix_operators=[], qualifier=y, selectors=[]), operandr=MemberReference(member=z, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=yorigcolor, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=BLACK, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": false}]}, {"name": "deleteFixup", "modifiers": [], "return_type": "void", "parameters": [{"name": "x", "type": "Node"}], "invocations": [{"qualifier": "", "member": "rotateLeft", "arguments": ["p"]}, {"qualifier": "", "member": "rotateRight", "arguments": ["w"]}, {"qualifier": "", "member": "rotateLeft", "arguments": ["p"]}, {"qualifier": "", "member": "rotateRight", "arguments": ["p"]}, {"qualifier": "", "member": "rotateLeft", "arguments": ["w"]}, {"qualifier": "", "member": "rotateRight", "arguments": ["p"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=x.p, selectors=[]), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=color, postfix_operators=[], prefix_operators=[], qualifier=w, selectors=[]), operandr=MemberReference(member=RED, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=color, postfix_operators=[], prefix_operators=[], qualifier=w.left, selectors=[]), operandr=MemberReference(member=BLACK, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), operandr=BinaryOperation(operandl=MemberReference(member=color, postfix_operators=[], prefix_operators=[], qualifier=w.right, selectors=[]), operandr=MemberReference(member=BLACK, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), operator=&&)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=color, postfix_operators=[], prefix_operators=[], qualifier=w.right, selectors=[]), operandr=MemberReference(member=BLACK, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=color, postfix_operators=[], prefix_operators=[], qualifier=w.right, selectors=[]), operandr=MemberReference(member=RED, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=color, postfix_operators=[], prefix_operators=[], qualifier=w, selectors=[]), operandr=MemberReference(member=RED, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=color, postfix_operators=[], prefix_operators=[], qualifier=w.right, selectors=[]), operandr=MemberReference(member=BLACK, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), operandr=BinaryOperation(operandl=MemberReference(member=color, postfix_operators=[], prefix_operators=[], qualifier=w.left, selectors=[]), operandr=MemberReference(member=BLACK, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), operator=&&)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=color, postfix_operators=[], prefix_operators=[], qualifier=w.left, selectors=[]), operandr=MemberReference(member=BLACK, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=color, postfix_operators=[], prefix_operators=[], qualifier=w.left, selectors=[]), operandr=MemberReference(member=RED, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": false}]}, {"name": "insertDemo", "modifiers": ["public"], "return_type": "void", "parameters": [], "invocations": [{"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Add items\")"]}, {"qualifier": "scan", "member": "nextInt", "arguments": []}, {"qualifier": "", "member": "insert", "arguments": ["node"]}, {"qualifier": "scan", "member": "nextInt", "arguments": []}, {"qualifier": "", "member": "printTree", "arguments": ["root"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Pre order\")"]}, {"qualifier": "", "member": "printTreepre", "arguments": ["root"]}, {"qualifier": "scan", "member": "close", "arguments": []}], "conditionals": []}, {"name": "deleteDemo", "modifiers": ["public"], "return_type": "void", "parameters": [], "invocations": [{"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Delete items\")"]}, {"qualifier": "scan", "member": "nextInt", "arguments": []}, {"qualifier": "System.out", "member": "print", "arguments": ["BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Deleting item \"), operandr=MemberReference(member=item, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)"]}, {"qualifier": "", "member": "delete", "arguments": ["node"]}, {"qualifier": "System.out", "member": "print", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\": deleted!\")"]}, {"qualifier": "System.out", "member": "print", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\": does not exist!\")"]}, {"qualifier": "System.out", "member": "println", "arguments": []}, {"qualifier": "", "member": "printTree", "arguments": ["root"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Pre order\")"]}, {"qualifier": "", "member": "printTreepre", "arguments": ["root"]}, {"qualifier": "scan", "member": "close", "arguments": []}], "conditionals": [{"condition": "MethodInvocation(arguments=[MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=delete, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)", "has_else": true}]}]}]}
```
Rules:
1. Use @Test from JUnit 5.
2. Resolve all the dependencies. Use Mockito (@Mock, Mockito.when(...), verify(...)) for all dependencies.
3. Instantiate focal class
4. Use @BeforeEach for setting up required preconditions before each test method And @AfterEach for cleanup. Use @BeforeAll (static) if setup is required once before all tests.
5. For each invocation:
Stub its behavior (when(mock.member(args)).thenReturn(...) for non-void; doNothing().when(...) and verify mehtod call for void ).
6. Use Arrange-Act-Assert format.
  -Arrange: Set up inputs, mocks, or stubs.
  -Act: Call the method under test.
  -Assert:  Verify the results.
7. Make all test methods public.
8. Import only what is necessary: JUnit 5, Mockito, and the class under test.
9. Return only a complete Java test class, no explanation.

result: ```
package com.example;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.Scanner;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

public class RBTreeTest {
    private static final int ITEM_1 = 1;
    private static final int ITEM_2 = 2;
    private static final int ITEM_3 = 3;
    private static final int ITEM_4 = 4;
    private static final int ITEM_5 = 5;
    private static final int ITEM_6 = 6;
    private static final int ITEM_7 = 7;
    private static final int ITEM_8 = 8;
    private static final int ITEM_9 = 9;
    private static final int ITEM_10 = 10;

    @BeforeAll
    public static void setUp() {
        // Set up required preconditions before all tests.
    }

    @AfterEach
    public void tearDown() {
        // Cleanup after each test method.
    }

    @Test
    public void insertDemo_AddItemsAndPrintTree_Success() {
        // Arrange: Set up inputs, mocks, or stubs.
        RBTree tree = new RBTree();
        Scanner scan = mock(Scanner.class);
        when(scan.nextInt()).thenReturn(ITEM_1).thenReturn(ITEM_2).thenReturn(ITEM_3)
                .thenReturn(ITEM_4).thenReturn(ITEM_5).thenReturn(ITEM_6).thenReturn(ITEM_7)
                .thenReturn(ITEM_8).thenReturn(ITEM_9).thenReturn(ITEM_10);
        // Act: Call the method under test.
        tree.insertDemo(scan);
        // Assert: Verify the results.
        assertEquals("Add items", "Add items");
    }

    @Test
    public void deleteDemo_DeleteItemsAndPrintTree_Success() {
        // Arrange: Set up inputs, mocks, or stubs.
        RBTree tree = new RBTree();
        Scanner scan = mock(Scanner.class);
        when(scan.nextInt()).thenReturn(ITEM_1).thenReturn(ITEM_2).thenReturn(ITEM_3)
                .thenReturn(ITEM_4).thenReturn(ITEM_5).thenReturn(ITEM_6).thenReturn(ITEM_7)
                .thenReturn(ITEM_8).thenReturn(ITEM_9).thenReturn(ITEM_10);
        // Act: Call the method under test.
        tree.deleteDemo(scan);
        // Assert: Verify the results.
        assertEquals("Delete items", "Delete items");
    }
}
```
