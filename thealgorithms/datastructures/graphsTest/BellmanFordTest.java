query: 
You are a Java testing assistant.
Below is a JSON array of method-metadata for the class under test. Your task is to generate a complete, idiomatic JUnit 5 unit test class for each following Java method:
```json
{"package": "com.thealgorithms.datastructures.graphs", "imports": ["java.util.Scanner"], "classes": [{"class_name": "BellmanFord", "modifiers": [], "fields": [{"name": "vertex", "type": "int"}, {"name": "edge", "type": "int"}, {"name": "edges", "type": "Edge"}, {"name": "index", "type": "int"}], "constructors": [{"parameters": [{"name": "v", "type": "int"}, {"name": "e", "type": "int"}], "modifiers": []}], "methods": [{"name": "printPath", "modifiers": [], "return_type": "void", "parameters": [{"name": "p", "type": "int"}, {"name": "i", "type": "int"}], "invocations": [{"qualifier": "", "member": "printPath", "arguments": ["p", "p"]}, {"qualifier": "System.out", "member": "print", "arguments": ["BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\" \"), operator=+)"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=p, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=1), operator===)", "has_else": false}]}, {"name": "main", "modifiers": ["public", "static"], "return_type": "void", "parameters": [{"name": "args", "type": "String"}], "invocations": [{"qualifier": "obj", "member": "go", "arguments": []}], "conditionals": []}, {"name": "go", "modifiers": ["public"], "return_type": "void", "parameters": [], "invocations": [{"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Enter no. of vertices and edges please\")"]}, {"qualifier": "sc", "member": "nextInt", "arguments": []}, {"qualifier": "sc", "member": "nextInt", "arguments": []}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Input edges\")"]}, {"qualifier": "sc", "member": "nextInt", "arguments": []}, {"qualifier": "sc", "member": "nextInt", "arguments": []}, {"qualifier": "sc", "member": "nextInt", "arguments": []}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Negative cycle\")"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Distances are: \")"]}, {"qualifier": "System.out", "member": "println", "arguments": ["BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\" \"), operator=+), operandr=MemberReference(member=dist, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=+)"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Path followed:\")"]}, {"qualifier": "System.out", "member": "print", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"0 \")"]}, {"qualifier": "", "member": "printPath", "arguments": ["p", "i"]}, {"qualifier": "System.out", "member": "println", "arguments": []}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=dist, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), MemberReference(member=u, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]))]), operandr=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[]), operator=!=), operandr=BinaryOperation(operandl=MemberReference(member=dist, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), MemberReference(member=v, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]))]), operandr=BinaryOperation(operandl=MemberReference(member=dist, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), MemberReference(member=u, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]))]), operandr=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), MemberReference(member=w, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operator=+), operator=>), operator=&&)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=dist, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), MemberReference(member=u, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]))]), operandr=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[]), operator=!=), operandr=BinaryOperation(operandl=MemberReference(member=dist, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), MemberReference(member=v, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]))]), operandr=BinaryOperation(operandl=MemberReference(member=dist, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), MemberReference(member=u, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]))]), operandr=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), MemberReference(member=w, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operator=+), operator=>), operator=&&)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=neg, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator===)", "has_else": false}]}, {"name": "show", "modifiers": ["public"], "return_type": "void", "parameters": [{"name": "source", "type": "int"}, {"name": "end", "type": "int"}, {"name": "arr", "type": "Edge"}], "invocations": [{"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Negative cycle\")"]}, {"qualifier": "System.out", "member": "println", "arguments": ["BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Distance is: \"), operandr=MemberReference(member=dist, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=end, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=+)"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Path followed:\")"]}, {"qualifier": "System.out", "member": "print", "arguments": ["BinaryOperation(operandl=MemberReference(member=source, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\" \"), operator=+)"]}, {"qualifier": "", "member": "printPath", "arguments": ["p", "end"]}, {"qualifier": "System.out", "member": "println", "arguments": []}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=Cast(expression=MemberReference(member=dist, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), MemberReference(member=u, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]))]), type=BasicType(dimensions=[], name=int)), operandr=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[]), operator=!=), operandr=BinaryOperation(operandl=MemberReference(member=dist, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), MemberReference(member=v, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]))]), operandr=BinaryOperation(operandl=MemberReference(member=dist, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), MemberReference(member=u, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]))]), operandr=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), MemberReference(member=w, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operator=+), operator=>), operator=&&)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=Cast(expression=MemberReference(member=dist, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), MemberReference(member=u, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]))]), type=BasicType(dimensions=[], name=int)), operandr=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[]), operator=!=), operandr=BinaryOperation(operandl=MemberReference(member=dist, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), MemberReference(member=v, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]))]), operandr=BinaryOperation(operandl=MemberReference(member=dist, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), MemberReference(member=u, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]))]), operandr=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), MemberReference(member=w, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operator=+), operator=>), operator=&&)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=neg, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator===)", "has_else": false}]}, {"name": "addEdge", "modifiers": ["public"], "return_type": "void", "parameters": [{"name": "x", "type": "int"}, {"name": "y", "type": "int"}, {"name": "z", "type": "int"}], "invocations": [], "conditionals": []}, {"name": "getEdgeArray", "modifiers": ["public"], "return_type": "Edge", "parameters": [], "invocations": [], "conditionals": []}]}]}
```
Rules:
1. Use @Test from JUnit 5.
2. Resolve all the dependencies. Use Mockito (@Mock, Mockito.when(...), verify(...)) for all dependencies.
3. Instantiate focal class
4. Use @BeforeEach for setting up required preconditions before each test method And @AfterEach for cleanup. Use @BeforeAll (static) if setup is required once before all tests.
5. For each invocation:
Stub its behavior (when(mock.member(args)).thenReturn(...) for non-void; doNothing().when(...) and verify mehtod call for void ).
6. Use Arrange-Act-Assert format.
  -Arrange: Set up inputs, mocks, or stubs.
  -Act: Call the method under test.
  -Assert:  Verify the results.
7. Make all test methods public.
8. Import only what is necessary: JUnit 5, Mockito, and the class under test.
9. Return only a complete Java test class, no explanation.

result: ```java
import org.junit.jupiter.api.*;
import static org.mockito.Mockito.*;

class FocalClassTest {
    @Mock
    private Edge edge;

    @BeforeEach
    void setUp() {
        // Set up inputs, mocks, or stubs
    }

    @AfterEach
    void tearDown() {
        // Cleanup
    }

    @Test
    void testAddEdge() {
        // Arrange
        int x = 1;
        int y = 2;
        int z = 3;
        when(edge.getX()).thenReturn(x);
        when(edge.getY()).thenReturn(y);
        when(edge.getZ()).thenReturn(z);

        // Act
        focalClass.addEdge(x, y, z);

        // Assert
        verify(edge).setX(x);
        verify(edge).setY(y);
        verify(edge).setZ(z);
    }

    @Test
    void testGetEdgeArray() {
        // Arrange
        int x = 1;
        int y = 2;
        int z = 3;
        when(edge.getX()).thenReturn(x);
        when(edge.getY()).thenReturn(y);
        when(edge.getZ()).thenReturn(z);

        // Act
        focalClass.getEdgeArray();

        // Assert
        verify(edge).setX(x);
        verify(edge).setY(y);
        verify(edge).setZ(z);
    }
}
```
