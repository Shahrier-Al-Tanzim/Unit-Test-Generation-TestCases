query: 
You are a Java testing assistant.
Below is a JSON array of method-metadata for the class under test. Your task is to generate a complete, idiomatic JUnit 5 unit test class for each following Java method:
```json
{"package": "com.thealgorithms.dynamicprogramming", "imports": [], "classes": [{"class_name": "RegexMatching", "modifiers": ["public", "final"], "fields": [], "constructors": [{"parameters": [], "modifiers": ["private"]}], "methods": [{"name": "regexRecursion", "modifiers": ["public", "static"], "return_type": "boolean", "parameters": [{"name": "src", "type": "String"}, {"name": "pat", "type": "String"}], "invocations": [{"qualifier": "src", "member": "length", "arguments": []}, {"qualifier": "pat", "member": "length", "arguments": []}, {"qualifier": "src", "member": "length", "arguments": []}, {"qualifier": "pat", "member": "length", "arguments": []}, {"qualifier": "src", "member": "length", "arguments": []}, {"qualifier": "pat", "member": "length", "arguments": []}, {"qualifier": "pat", "member": "length", "arguments": []}, {"qualifier": "pat", "member": "charAt", "arguments": ["i"]}, {"qualifier": "src", "member": "charAt", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)"]}, {"qualifier": "pat", "member": "charAt", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)"]}, {"qualifier": "src", "member": "substring", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)"]}, {"qualifier": "pat", "member": "substring", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)"]}, {"qualifier": "", "member": "regexRecursion", "arguments": ["ros", "rop"]}, {"qualifier": "", "member": "regexRecursion", "arguments": ["src", "rop"]}, {"qualifier": "", "member": "regexRecursion", "arguments": ["ros", "pat"]}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=src, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator===), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=pat, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator===), operator=&&)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=src, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=!=), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=pat, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator===), operator=&&)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=src, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator===), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=pat, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=!=), operator=&&)", "has_else": false}, {"condition": "BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=charAt, postfix_operators=[], prefix_operators=[], qualifier=pat, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='*'), operator=!=)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=chs, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=chp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), operandr=BinaryOperation(operandl=MemberReference(member=chp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='?'), operator===), operator=||)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=chp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='*'), operator===)", "has_else": true}]}, {"name": "regexRecursion", "modifiers": ["static"], "return_type": "boolean", "parameters": [{"name": "src", "type": "String"}, {"name": "pat", "type": "String"}, {"name": "svidx", "type": "int"}, {"name": "pvidx", "type": "int"}], "invocations": [{"qualifier": "src", "member": "length", "arguments": []}, {"qualifier": "pat", "member": "length", "arguments": []}, {"qualifier": "src", "member": "length", "arguments": []}, {"qualifier": "pat", "member": "length", "arguments": []}, {"qualifier": "src", "member": "length", "arguments": []}, {"qualifier": "pat", "member": "length", "arguments": []}, {"qualifier": "pat", "member": "length", "arguments": []}, {"qualifier": "pat", "member": "charAt", "arguments": ["i"]}, {"qualifier": "src", "member": "charAt", "arguments": ["svidx"]}, {"qualifier": "pat", "member": "charAt", "arguments": ["pvidx"]}, {"qualifier": "", "member": "regexRecursion", "arguments": ["src", "pat", "BinaryOperation(operandl=MemberReference(member=svidx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)", "BinaryOperation(operandl=MemberReference(member=pvidx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)"]}, {"qualifier": "", "member": "regexRecursion", "arguments": ["src", "pat", "svidx", "BinaryOperation(operandl=MemberReference(member=pvidx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)"]}, {"qualifier": "", "member": "regexRecursion", "arguments": ["src", "pat", "BinaryOperation(operandl=MemberReference(member=svidx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)", "pvidx"]}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=src, selectors=[], type_arguments=None), operandr=MemberReference(member=svidx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=pat, selectors=[], type_arguments=None), operandr=MemberReference(member=pvidx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), operator=&&)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=src, selectors=[], type_arguments=None), operandr=MemberReference(member=svidx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=pat, selectors=[], type_arguments=None), operandr=MemberReference(member=pvidx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), operator=&&)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=src, selectors=[], type_arguments=None), operandr=MemberReference(member=svidx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=pat, selectors=[], type_arguments=None), operandr=MemberReference(member=pvidx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=), operator=&&)", "has_else": false}, {"condition": "BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=charAt, postfix_operators=[], prefix_operators=[], qualifier=pat, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='*'), operator=!=)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=chs, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=chp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), operandr=BinaryOperation(operandl=MemberReference(member=chp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='?'), operator===), operator=||)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=chp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='*'), operator===)", "has_else": true}]}, {"name": "regexRecursion", "modifiers": ["public", "static"], "return_type": "boolean", "parameters": [{"name": "src", "type": "String"}, {"name": "pat", "type": "String"}, {"name": "svidx", "type": "int"}, {"name": "pvidx", "type": "int"}, {"name": "strg", "type": "int"}], "invocations": [{"qualifier": "src", "member": "length", "arguments": []}, {"qualifier": "pat", "member": "length", "arguments": []}, {"qualifier": "src", "member": "length", "arguments": []}, {"qualifier": "pat", "member": "length", "arguments": []}, {"qualifier": "src", "member": "length", "arguments": []}, {"qualifier": "pat", "member": "length", "arguments": []}, {"qualifier": "pat", "member": "length", "arguments": []}, {"qualifier": "pat", "member": "charAt", "arguments": ["i"]}, {"qualifier": "src", "member": "charAt", "arguments": ["svidx"]}, {"qualifier": "pat", "member": "charAt", "arguments": ["pvidx"]}, {"qualifier": "", "member": "regexRecursion", "arguments": ["src", "pat", "BinaryOperation(operandl=MemberReference(member=svidx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)", "BinaryOperation(operandl=MemberReference(member=pvidx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)", "strg"]}, {"qualifier": "", "member": "regexRecursion", "arguments": ["src", "pat", "svidx", "BinaryOperation(operandl=MemberReference(member=pvidx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)", "strg"]}, {"qualifier": "", "member": "regexRecursion", "arguments": ["src", "pat", "BinaryOperation(operandl=MemberReference(member=svidx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)", "pvidx", "strg"]}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=src, selectors=[], type_arguments=None), operandr=MemberReference(member=svidx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=pat, selectors=[], type_arguments=None), operandr=MemberReference(member=pvidx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), operator=&&)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=src, selectors=[], type_arguments=None), operandr=MemberReference(member=svidx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=pat, selectors=[], type_arguments=None), operandr=MemberReference(member=pvidx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), operator=&&)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=src, selectors=[], type_arguments=None), operandr=MemberReference(member=svidx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=pat, selectors=[], type_arguments=None), operandr=MemberReference(member=pvidx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=), operator=&&)", "has_else": false}, {"condition": "BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=charAt, postfix_operators=[], prefix_operators=[], qualifier=pat, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='*'), operator=!=)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=strg, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=svidx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), ArraySelector(index=MemberReference(member=pvidx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=!=)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=chs, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=chp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), operandr=BinaryOperation(operandl=MemberReference(member=chp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='?'), operator===), operator=||)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=chp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='*'), operator===)", "has_else": true}]}, {"name": "regexBU", "modifiers": ["static"], "return_type": "boolean", "parameters": [{"name": "src", "type": "String"}, {"name": "pat", "type": "String"}], "invocations": [{"qualifier": "src", "member": "length", "arguments": []}, {"qualifier": "pat", "member": "length", "arguments": []}, {"qualifier": "src", "member": "length", "arguments": []}, {"qualifier": "pat", "member": "length", "arguments": []}, {"qualifier": "src", "member": "length", "arguments": []}, {"qualifier": "pat", "member": "length", "arguments": []}, {"qualifier": "src", "member": "length", "arguments": []}, {"qualifier": "pat", "member": "charAt", "arguments": ["col"]}, {"qualifier": "src", "member": "charAt", "arguments": ["row"]}, {"qualifier": "pat", "member": "charAt", "arguments": ["col"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=row, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=src, selectors=[], type_arguments=None), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=col, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=charAt, postfix_operators=[], prefix_operators=[], qualifier=pat, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='*'), operator===)", "has_else": true}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=chs, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=chp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), operandr=BinaryOperation(operandl=MemberReference(member=chp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='?'), operator===), operator=||)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=chp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='*'), operator===)", "has_else": true}]}]}]}
```
Rules:
1. Use @Test from JUnit 5.
2. Resolve all the dependencies. Use Mockito (@Mock, Mockito.when(...), verify(...)) for all dependencies.
3. Instantiate focal class
4. Use @BeforeEach for setting up required preconditions before each test method And @AfterEach for cleanup. Use @BeforeAll (static) if setup is required once before all tests.
5. For each invocation:
Stub its behavior (when(mock.member(args)).thenReturn(...) for non-void; doNothing().when(...) and verify mehtod call for void ).
6. Use Arrange-Act-Assert format.
  -Arrange: Set up inputs, mocks, or stubs.
  -Act: Call the method under test.
  -Assert:  Verify the results.
7. Make all test methods public.
8. Import only what is necessary: JUnit 5, Mockito, and the class under test.
9. Return only a complete Java test class, no explanation.

result: ```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class FocalClassTest {
    @Mock private Dependency1 mockDependency1;
    @Mock private Dependency2 mockDependency2;
    @Mock private Dependency3 mockDependency3;

    private FocalClass focalClass;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
        focalClass = new FocalClass();
    }

    @Test
    void testMethod1() {
        // Arrange
        when(mockDependency1.method1()).thenReturn("result");

        // Act
        String actualResult = focalClass.method1();

        // Assert
        assertEquals("result", actualResult);
    }

    @Test
    void testMethod2() {
        // Arrange
        doNothing().when(mockDependency2).method2();

        // Act
        focalClass.method2();

        // Assert
        verify(mockDependency2).method2();
    }

    @Test
    void testMethod3() {
        // Arrange
        when(mockDependency3.method3()).thenReturn("result");

        // Act
        String actualResult = focalClass.method3();

        // Assert
        assertEquals("result", actualResult);
    }
}
```
