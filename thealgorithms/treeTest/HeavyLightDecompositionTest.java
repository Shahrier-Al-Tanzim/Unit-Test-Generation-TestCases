query: 
You are a Java testing assistant.
Below is a JSON array of method-metadata for the class under test. Your task is to generate a complete, idiomatic JUnit 5 unit test class for each following Java method:
```json
{"package": "com.thealgorithms.tree", "imports": ["java.util.ArrayList", "java.util.List"], "classes": [{"class_name": "HeavyLightDecomposition", "modifiers": ["public"], "fields": [{"name": "tree", "type": "List"}, {"name": "parent", "type": "int"}, {"name": "depth", "type": "int"}, {"name": "subtreeSize", "type": "int"}, {"name": "chainHead", "type": "int"}, {"name": "position", "type": "int"}, {"name": "nodeValue", "type": "int"}, {"name": "segmentTree", "type": "int"}, {"name": "positionIndex", "type": "int"}], "constructors": [{"parameters": [{"name": "n", "type": "int"}], "modifiers": ["public"]}], "methods": [{"name": "getPosition", "modifiers": ["public"], "return_type": "int", "parameters": [{"name": "index", "type": "int"}], "invocations": [], "conditionals": []}, {"name": "getPositionIndex", "modifiers": ["public"], "return_type": "int", "parameters": [], "invocations": [], "conditionals": []}, {"name": "addEdge", "modifiers": ["public"], "return_type": "void", "parameters": [{"name": "u", "type": "int"}, {"name": "v", "type": "int"}], "invocations": [{"qualifier": "tree", "member": "get", "arguments": ["u"]}, {"qualifier": null, "member": "add", "arguments": ["v"]}, {"qualifier": "tree", "member": "get", "arguments": ["v"]}, {"qualifier": null, "member": "add", "arguments": ["u"]}], "conditionals": []}, {"name": "dfsSize", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "node", "type": "int"}, {"name": "parentNode", "type": "int"}], "invocations": [{"qualifier": "tree", "member": "get", "arguments": ["node"]}, {"qualifier": "", "member": "dfsSize", "arguments": ["child", "node"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=child, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=parentNode, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=)", "has_else": false}]}, {"name": "decompose", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "node", "type": "int"}, {"name": "head", "type": "int"}], "invocations": [{"qualifier": "tree", "member": "get", "arguments": ["node"]}, {"qualifier": "", "member": "decompose", "arguments": ["heavyChild", "head"]}, {"qualifier": "tree", "member": "get", "arguments": ["node"]}, {"qualifier": "", "member": "decompose", "arguments": ["child", "child"]}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=child, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=parent, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=!=), operandr=BinaryOperation(operandl=MemberReference(member=subtreeSize, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=child, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=maxSubtreeSize, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), operator=&&)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=heavyChild, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=1), operator=!=)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=child, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=parent, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=!=), operandr=BinaryOperation(operandl=MemberReference(member=child, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=heavyChild, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=!=), operator=&&)", "has_else": false}]}, {"name": "buildSegmentTree", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "node", "type": "int"}, {"name": "start", "type": "int"}, {"name": "end", "type": "int"}], "invocations": [{"qualifier": "", "member": "buildSegmentTree", "arguments": ["BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operandr=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*)", "start", "mid"]}, {"qualifier": "", "member": "buildSegmentTree", "arguments": ["BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operandr=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)", "BinaryOperation(operandl=MemberReference(member=mid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)", "end"]}, {"qualifier": "Math", "member": "max", "arguments": ["segmentTree", "segmentTree"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=end, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": false}]}, {"name": "updateSegmentTree", "modifiers": ["public"], "return_type": "void", "parameters": [{"name": "node", "type": "int"}, {"name": "start", "type": "int"}, {"name": "end", "type": "int"}, {"name": "index", "type": "int"}, {"name": "value", "type": "int"}], "invocations": [{"qualifier": "", "member": "updateSegmentTree", "arguments": ["BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operandr=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*)", "start", "mid", "index", "value"]}, {"qualifier": "", "member": "updateSegmentTree", "arguments": ["BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operandr=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)", "BinaryOperation(operandl=MemberReference(member=mid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)", "end", "index", "value"]}, {"qualifier": "Math", "member": "max", "arguments": ["segmentTree", "segmentTree"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=end, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=mid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<=)", "has_else": true}]}, {"name": "querySegmentTree", "modifiers": ["public"], "return_type": "int", "parameters": [{"name": "node", "type": "int"}, {"name": "start", "type": "int"}, {"name": "end", "type": "int"}, {"name": "left", "type": "int"}, {"name": "right", "type": "int"}], "invocations": [{"qualifier": "", "member": "querySegmentTree", "arguments": ["BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operandr=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*)", "start", "mid", "left", "right"]}, {"qualifier": "", "member": "querySegmentTree", "arguments": ["BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operandr=MemberReference(member=node, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)", "BinaryOperation(operandl=MemberReference(member=mid, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)", "end", "left", "right"]}, {"qualifier": "Math", "member": "max", "arguments": ["leftQuery", "rightQuery"]}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=end, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>), operandr=BinaryOperation(operandl=MemberReference(member=right, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), operator=||)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=left, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<=), operandr=BinaryOperation(operandl=MemberReference(member=end, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=right, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<=), operator=&&)", "has_else": false}]}, {"name": "queryMaxInPath", "modifiers": ["public"], "return_type": "int", "parameters": [{"name": "u", "type": "int"}, {"name": "v", "type": "int"}], "invocations": [{"qualifier": "Math", "member": "max", "arguments": ["result", "MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), BinaryOperation(operandl=MemberReference(member=positionIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-), MemberReference(member=position, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=chainHead, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=u, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]))]), MemberReference(member=position, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=u, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))])], member=querySegmentTree, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)"]}, {"qualifier": "", "member": "querySegmentTree", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "BinaryOperation(operandl=MemberReference(member=positionIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)", "position", "position"]}, {"qualifier": "Math", "member": "max", "arguments": ["result", "MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), BinaryOperation(operandl=MemberReference(member=positionIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-), MemberReference(member=position, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=u, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), MemberReference(member=position, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=v, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))])], member=querySegmentTree, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)"]}, {"qualifier": "", "member": "querySegmentTree", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "BinaryOperation(operandl=MemberReference(member=positionIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)", "position", "position"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=depth, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=chainHead, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=u, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]))]), operandr=MemberReference(member=depth, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=chainHead, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=v, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]))]), operator=<)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=depth, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=u, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=depth, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=v, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=>)", "has_else": false}]}, {"name": "initialize", "modifiers": ["public"], "return_type": "void", "parameters": [{"name": "root", "type": "int"}, {"name": "values", "type": "int"}], "invocations": [{"qualifier": "", "member": "dfsSize", "arguments": ["root", "Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=1)"]}, {"qualifier": "", "member": "decompose", "arguments": ["root", "root"]}, {"qualifier": "", "member": "buildSegmentTree", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "BinaryOperation(operandl=MemberReference(member=positionIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)"]}], "conditionals": []}]}]}
```
Rules:
1. Use @Test from JUnit 5.
2. Resolve all the dependencies. Use Mockito (@Mock, Mockito.when(...), verify(...)) for all dependencies.
3. Instantiate focal class
4. Use @BeforeEach for setting up required preconditions before each test method And @AfterEach for cleanup. Use @BeforeAll (static) if setup is required once before all tests.
5. For each invocation:
Stub its behavior (when(mock.member(args)).thenReturn(...) for non-void; doNothing().when(...) and verify mehtod call for void ).
6. Use Arrange-Act-Assert format.
  -Arrange: Set up inputs, mocks, or stubs.
  -Act: Call the method under test.
  -Assert:  Verify the results.
7. Make all test methods public.
8. Import only what is necessary: JUnit 5, Mockito, and the class under test.
9. Return only a complete Java test class, no explanation.

result: import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.mockito.Mockito.*;

class TestClass {
    @BeforeEach
    void setUp() {
        // Set up inputs, mocks, or stubs
    }

    @AfterEach
    void tearDown() {
        // Cleanup
    }

    @Test
    void testMethod1() {
        // Arrange
        int root = 1;
        int values = 2;
        FocalClass focalClass = new FocalClass();

        // Act
        focalClass.initialize(root, values);

        // Assert
        verify(focalClass).dfsSize(root, -1);
        verify(focalClass).decompose(root, root);
        verify(focalClass).buildSegmentTree(1, 0, -1);
    }

    @Test
    void testMethod2() {
        // Arrange
        int root = 1;
        int values = 2;
        FocalClass focalClass = new FocalClass();

        // Act
        focalClass.initialize(root, values);

        // Assert
        verify(focalClass).dfsSize(root, -1);
        verify(focalClass).decompose(root, root);
        verify(focalClass).buildSegmentTree(1, 0, -1);
    }
}
