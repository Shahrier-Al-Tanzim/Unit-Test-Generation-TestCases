query: 
You are a Java testing assistant.
Below is a JSON array of method-metadata for the class under test. Your task is to generate a complete, idiomatic JUnit 5 unit test class for each following Java method:
```json
{"package": "com.thealgorithms.others", "imports": [], "classes": [{"class_name": "BFPRT", "modifiers": ["public", "final"], "fields": [], "constructors": [{"parameters": [], "modifiers": ["private"]}], "methods": [{"name": "getMinKNumsByBFPRT", "modifiers": ["public", "static"], "return_type": "int", "parameters": [{"name": "arr", "type": "int"}, {"name": "k", "type": "int"}], "invocations": [{"qualifier": "", "member": "getMinKthByBFPRT", "arguments": ["arr", "k"]}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=k, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=<), operandr=BinaryOperation(operandl=MemberReference(member=k, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=arr, selectors=[]), operator=>), operator=||)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=minKth, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<)", "has_else": false}]}, {"name": "getMinKthByBFPRT", "modifiers": ["public", "static"], "return_type": "int", "parameters": [{"name": "arr", "type": "int"}, {"name": "k", "type": "int"}], "invocations": [{"qualifier": "", "member": "copyArray", "arguments": ["arr"]}, {"qualifier": "", "member": "bfprt", "arguments": ["copyArr", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=copyArr, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)", "BinaryOperation(operandl=MemberReference(member=k, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)"]}], "conditionals": []}, {"name": "copyArray", "modifiers": ["public", "static"], "return_type": "int", "parameters": [{"name": "arr", "type": "int"}], "invocations": [{"qualifier": "System", "member": "arraycopy", "arguments": ["arr", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "copyArr", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "length"]}], "conditionals": []}, {"name": "bfprt", "modifiers": ["public", "static"], "return_type": "int", "parameters": [{"name": "arr", "type": "int"}, {"name": "begin", "type": "int"}, {"name": "end", "type": "int"}, {"name": "i", "type": "int"}], "invocations": [{"qualifier": "", "member": "medianOfMedians", "arguments": ["arr", "begin", "end"]}, {"qualifier": "", "member": "partition", "arguments": ["arr", "begin", "end", "pivot"]}, {"qualifier": "", "member": "bfprt", "arguments": ["arr", "begin", "BinaryOperation(operandl=MemberReference(member=pivotRange, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0))]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)", "i"]}, {"qualifier": "", "member": "bfprt", "arguments": ["arr", "BinaryOperation(operandl=MemberReference(member=pivotRange, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1))]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)", "end", "i"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=begin, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=end, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===)", "has_else": false}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=pivotRange, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0))]), operator=>=), operandr=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=pivotRange, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1))]), operator=<=), operator=&&)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=pivotRange, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0))]), operator=<)", "has_else": true}]}, {"name": "medianOfMedians", "modifiers": ["public", "static"], "return_type": "int", "parameters": [{"name": "arr", "type": "int"}, {"name": "begin", "type": "int"}, {"name": "end", "type": "int"}], "invocations": [{"qualifier": "", "member": "getMedian", "arguments": ["arr", "BinaryOperation(operandl=MemberReference(member=begin, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), operator=*), operator=+)", "MethodInvocation(arguments=[MemberReference(member=end, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=begin, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), operator=*), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), operator=+)], member=min, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None)"]}, {"qualifier": "Math", "member": "min", "arguments": ["end", "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=begin, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), operator=*), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), operator=+)"]}, {"qualifier": "", "member": "bfprt", "arguments": ["mArr", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=mArr, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)", "BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=mArr, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=/)"]}], "conditionals": []}, {"name": "partition", "modifiers": ["public", "static"], "return_type": "int", "parameters": [{"name": "arr", "type": "int"}, {"name": "begin", "type": "int"}, {"name": "end", "type": "int"}, {"name": "num", "type": "int"}], "invocations": [{"qualifier": "", "member": "swap", "arguments": ["arr", "small", "cur"]}, {"qualifier": "", "member": "swap", "arguments": ["arr", "big", "cur"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=cur, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=cur, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operandr=MemberReference(member=num, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>)", "has_else": true}]}, {"name": "getMedian", "modifiers": ["public", "static"], "return_type": "int", "parameters": [{"name": "arr", "type": "int"}, {"name": "begin", "type": "int"}, {"name": "end", "type": "int"}], "invocations": [{"qualifier": "", "member": "insertionSort", "arguments": ["arr", "begin", "end"]}], "conditionals": []}, {"name": "insertionSort", "modifiers": ["public", "static"], "return_type": "void", "parameters": [{"name": "arr", "type": "int"}, {"name": "begin", "type": "int"}, {"name": "end", "type": "int"}], "invocations": [{"qualifier": "", "member": "swap", "arguments": ["arr", "BinaryOperation(operandl=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)", "j"]}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), operandr=BinaryOperation(operandl=MemberReference(member=length, postfix_operators=[], prefix_operators=[], qualifier=arr, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=<), operator=||)", "has_else": false}, {"condition": "BinaryOperation(operandl=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=BinaryOperation(operandl=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-))]), operandr=MemberReference(member=arr, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=>)", "has_else": true}]}, {"name": "swap", "modifiers": ["public", "static"], "return_type": "void", "parameters": [{"name": "arr", "type": "int"}, {"name": "i", "type": "int"}, {"name": "j", "type": "int"}], "invocations": [], "conditionals": []}]}]}
```
Rules:
1. Use @Test from JUnit 5.
2. Resolve all the dependencies. Use Mockito (@Mock, Mockito.when(...), verify(...)) for all dependencies.
3. Instantiate focal class
4. Use @BeforeEach for setting up required preconditions before each test method And @AfterEach for cleanup. Use @BeforeAll (static) if setup is required once before all tests.
5. For each invocation:
Stub its behavior (when(mock.member(args)).thenReturn(...) for non-void; doNothing().when(...) and verify mehtod call for void ).
6. Use Arrange-Act-Assert format.
  -Arrange: Set up inputs, mocks, or stubs.
  -Act: Call the method under test.
  -Assert:  Verify the results.
7. Make all test methods public.
8. Import only what is necessary: JUnit 5, Mockito, and the class under test.
9. Return only a complete Java test class, no explanation.

result: ```
import org.junit.jupiter.api.*;
import static org.mockito.Mockito.*;

class BubbleSortTest {
    @BeforeEach
    void setUp() {
        // Set up preconditions before each test method
    }

    @AfterEach
    void tearDown() {
        // Cleanup after each test method
    }

    @Test
    public void testSort() {
        // Arrange
        int[] arr = new int[]{1, 2, 3, 4, 5};
        BubbleSort bubbleSort = new BubbleSort();
        when(bubbleSort.sort(arr)).thenReturn(new int[]{1, 2, 3, 4, 5});

        // Act
        int[] sortedArr = bubbleSort.sort(arr);

        // Assert
        assertArrayEquals(sortedArr, new int[]{1, 2, 3, 4, 5});
    }
}
```
Note: This is just an example test class and may need to be modified based on the specific requirements of the BubbleSort class.
