query: 
You are a Java testing assistant.
Below is a JSON array of method-metadata for the class under test. Your task is to generate a complete, idiomatic JUnit 5 unit test class for each following Java method:
```json
{"package": "com.thealgorithms.others", "imports": ["java.awt.BasicStroke", "java.awt.Color", "java.awt.Graphics2D", "java.awt.image.BufferedImage", "java.io.File", "java.io.IOException", "java.util.ArrayList", "java.util.List", "javax.imageio.ImageIO"], "classes": [{"class_name": "KochSnowflake", "modifiers": ["public", "final"], "fields": [], "constructors": [{"parameters": [], "modifiers": ["private"]}], "methods": [{"name": "main", "modifiers": ["public", "static"], "return_type": "void", "parameters": [{"name": "args", "type": "String"}], "invocations": [{"qualifier": "vectors", "member": "add", "arguments": ["ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Vector2, sub_type=None))"]}, {"qualifier": "vectors", "member": "add", "arguments": ["ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Vector2, sub_type=None))"]}, {"qualifier": "", "member": "iterate", "arguments": ["vectors", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)"]}, {"qualifier": "result", "member": "get", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)"]}, {"qualifier": "result", "member": "get", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)"]}, {"qualifier": "result", "member": "get", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)"]}, {"qualifier": "result", "member": "get", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)"]}, {"qualifier": "result", "member": "get", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)"]}, {"qualifier": "result", "member": "get", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)"]}, {"qualifier": "Math", "member": "sin", "arguments": ["BinaryOperation(operandl=MemberReference(member=PI, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), operator=/)"]}, {"qualifier": "result", "member": "get", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3)"]}, {"qualifier": "result", "member": "get", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3)"]}, {"qualifier": "result", "member": "get", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4)"]}, {"qualifier": "result", "member": "get", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4)"]}, {"qualifier": "", "member": "getKochSnowflake", "arguments": ["imageWidth", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5)"]}, {"qualifier": "image", "member": "getRGB", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)"]}, {"qualifier": null, "member": "getRGB", "arguments": []}, {"qualifier": "image", "member": "getRGB", "arguments": ["Cast(expression=MemberReference(member=offsetX, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=BasicType(dimensions=[], name=int))", "Cast(expression=MemberReference(member=offsetY, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=BasicType(dimensions=[], name=int))"]}, {"qualifier": null, "member": "getRGB", "arguments": []}, {"qualifier": "ImageIO", "member": "write", "arguments": ["image", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"png\")", "ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"KochSnowflake.png\")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=File, sub_type=None))"]}, {"qualifier": "e", "member": "printStackTrace", "arguments": []}], "conditionals": []}, {"name": "iterate", "modifiers": ["public", "static"], "return_type": "ArrayList", "parameters": [{"name": "initialVectors", "type": "ArrayList"}, {"name": "steps", "type": "int"}], "invocations": [{"qualifier": "", "member": "iterationStep", "arguments": ["vectors"]}], "conditionals": []}, {"name": "getKochSnowflake", "modifiers": ["public", "static"], "return_type": "BufferedImage", "parameters": [{"name": "imageWidth", "type": "int"}, {"name": "steps", "type": "int"}], "invocations": [{"qualifier": "Math", "member": "sin", "arguments": ["BinaryOperation(operandl=MemberReference(member=PI, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3.0), operator=/)"]}, {"qualifier": "initialVectors", "member": "add", "arguments": ["vector1"]}, {"qualifier": "initialVectors", "member": "add", "arguments": ["vector2"]}, {"qualifier": "initialVectors", "member": "add", "arguments": ["vector3"]}, {"qualifier": "initialVectors", "member": "add", "arguments": ["vector1"]}, {"qualifier": "", "member": "iterate", "arguments": ["initialVectors", "steps"]}, {"qualifier": "", "member": "getImage", "arguments": ["vectors", "imageWidth", "imageWidth"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=imageWidth, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=<=)", "has_else": false}]}, {"name": "iterationStep", "modifiers": ["static", "private"], "return_type": "ArrayList", "parameters": [{"name": "vectors", "type": "List"}], "invocations": [{"qualifier": "vectors", "member": "size", "arguments": []}, {"qualifier": "vectors", "member": "get", "arguments": ["i"]}, {"qualifier": "vectors", "member": "get", "arguments": ["BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)"]}, {"qualifier": "newVectors", "member": "add", "arguments": ["startVector"]}, {"qualifier": "endVector", "member": "subtract", "arguments": ["startVector"]}, {"qualifier": null, "member": "multiply", "arguments": ["BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), operator=/)"]}, {"qualifier": "newVectors", "member": "add", "arguments": ["MethodInvocation(arguments=[MemberReference(member=differenceVector, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=startVector, selectors=[], type_arguments=None)"]}, {"qualifier": "startVector", "member": "add", "arguments": ["differenceVector"]}, {"qualifier": "newVectors", "member": "add", "arguments": ["MethodInvocation(arguments=[MemberReference(member=differenceVector, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=startVector, selectors=[MethodInvocation(arguments=[MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=60)], member=rotate, postfix_operators=[], prefix_operators=[], qualifier=differenceVector, selectors=[], type_arguments=None)], member=add, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None)"]}, {"qualifier": "startVector", "member": "add", "arguments": ["differenceVector"]}, {"qualifier": null, "member": "add", "arguments": ["MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=60)], member=rotate, postfix_operators=[], prefix_operators=[], qualifier=differenceVector, selectors=[], type_arguments=None)"]}, {"qualifier": "differenceVector", "member": "rotate", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=60)"]}, {"qualifier": "newVectors", "member": "add", "arguments": ["MethodInvocation(arguments=[MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=multiply, postfix_operators=[], prefix_operators=[], qualifier=differenceVector, selectors=[], type_arguments=None)], member=add, postfix_operators=[], prefix_operators=[], qualifier=startVector, selectors=[], type_arguments=None)"]}, {"qualifier": "startVector", "member": "add", "arguments": ["MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)], member=multiply, postfix_operators=[], prefix_operators=[], qualifier=differenceVector, selectors=[], type_arguments=None)"]}, {"qualifier": "differenceVector", "member": "multiply", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2)"]}, {"qualifier": "newVectors", "member": "add", "arguments": ["MethodInvocation(arguments=[BinaryOperation(operandl=MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=vectors, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)], member=get, postfix_operators=[], prefix_operators=[], qualifier=vectors, selectors=[], type_arguments=None)"]}, {"qualifier": "vectors", "member": "get", "arguments": ["BinaryOperation(operandl=MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=vectors, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)"]}, {"qualifier": "vectors", "member": "size", "arguments": []}], "conditionals": []}, {"name": "getImage", "modifiers": ["static", "private"], "return_type": "BufferedImage", "parameters": [{"name": "vectors", "type": "ArrayList"}, {"name": "imageWidth", "type": "int"}, {"name": "imageHeight", "type": "int"}], "invocations": [{"qualifier": "image", "member": "createGraphics", "arguments": []}, {"qualifier": "g2d", "member": "setBackground", "arguments": ["WHITE"]}, {"qualifier": "g2d", "member": "fillRect", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)", "imageWidth", "imageHeight"]}, {"qualifier": "g2d", "member": "setColor", "arguments": ["BLACK"]}, {"qualifier": "g2d", "member": "setStroke", "arguments": ["bs"]}, {"qualifier": "vectors", "member": "size", "arguments": []}, {"qualifier": "vectors", "member": "get", "arguments": ["i"]}, {"qualifier": "vectors", "member": "get", "arguments": ["i"]}, {"qualifier": "vectors", "member": "get", "arguments": ["BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)"]}, {"qualifier": "vectors", "member": "get", "arguments": ["BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+)"]}, {"qualifier": "g2d", "member": "drawLine", "arguments": ["x1", "y1", "x2", "y2"]}], "conditionals": []}]}]}
```
Rules:
1. Use @Test from JUnit 5.
2. Resolve all the dependencies. Use Mockito (@Mock, Mockito.when(...), verify(...)) for all dependencies.
3. Instantiate focal class
4. Use @BeforeEach for setting up required preconditions before each test method And @AfterEach for cleanup. Use @BeforeAll (static) if setup is required once before all tests.
5. For each invocation:
Stub its behavior (when(mock.member(args)).thenReturn(...) for non-void; doNothing().when(...) and verify mehtod call for void ).
6. Use Arrange-Act-Assert format.
  -Arrange: Set up inputs, mocks, or stubs.
  -Act: Call the method under test.
  -Assert:  Verify the results.
7. Make all test methods public.
8. Import only what is necessary: JUnit 5, Mockito, and the class under test.
9. Return only a complete Java test class, no explanation.

result: ```
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.mockito.Mockito.*;

class FocalClassTest {
    @Mock
    private Graphics2D g2d;

    @BeforeEach
    void setUp() {
        // Set up required preconditions before each test method
    }

    @AfterEach
    void tearDown() {
        // Cleanup after each test method
    }

    @Test
    void testGetImage() {
        // Arrange
        BufferedImage image = mock(BufferedImage.class);
        Graphics2D g2d = mock(Graphics2D.class);
        when(image.createGraphics()).thenReturn(g2d);
        FocalClass focalClass = new FocalClass();

        // Act
        BufferedImage result = focalClass.getImage(vectors, imageWidth, imageHeight);

        // Assert
        verify(image).createGraphics();
        verify(g2d).setBackground(WHITE);
        verify(g2d).fillRect(0, 0, imageWidth, imageHeight);
        verify(g2d).setColor(BLACK);
        verify(g2d).setStroke(bs);
        verify(vectors, times(vectors.size())).get(i);
        verify(vectors, times(vectors.size())).get(i);
        verify(vectors, times(vectors.size() - 1)).get(i);
        verify(g2d).drawLine(x1, y1, x2, y2);
    }
}
```
