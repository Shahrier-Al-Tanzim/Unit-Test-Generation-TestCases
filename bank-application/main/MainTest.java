query: 	
You are a Java testing assistant.

Below is a JSON array of method-metadata for the class under test. Your task is to generate a complete, idiomatic JUnit 5 unit test class for each following Java method:

```json
# {"package": "com.youtube.bank.main", "imports": ["com.youtube.bank.entity.User", "com.youtube.bank.service.UserService", "java.util.List", "java.util.Map", "java.util.Scanner"], "classes": [{"class_name": "Main", "modifiers": ["public"], "fields": [{"name": "scanner", "type": "Scanner"}, {"name": "main", "type": "Main"}, {"name": "userService", "type": "UserService"}], "constructors": [], "methods": [{"name": "main", "modifiers": ["public", "static"], "return_type": "void", "parameters": [{"name": "args", "type": "String"}], "invocations": [{"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Enter your username\")"]}, {"qualifier": "scanner", "member": "next", "arguments": []}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Enter your password\")"]}, {"qualifier": "scanner", "member": "next", "arguments": []}, {"qualifier": "userService", "member": "login", "arguments": ["username", "password"]}, {"qualifier": "user", "member": "getRole", "arguments": []}, {"qualifier": null, "member": "equals", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"admin\")"]}, {"qualifier": "main", "member": "initAdmin", "arguments": []}, {"qualifier": "user", "member": "getRole", "arguments": []}, {"qualifier": null, "member": "equals", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"user\")"]}, {"qualifier": "main", "member": "initCustomer", "arguments": ["user"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Login failed\")"]}], "conditionals": [{"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=user, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), operandr=MethodInvocation(arguments=[], member=getRole, postfix_operators=[], prefix_operators=[], qualifier=user, selectors=[MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"admin\")], member=equals, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), operator=&&)", "has_else": true}, {"condition": "BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=user, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), operandr=MethodInvocation(arguments=[], member=getRole, postfix_operators=[], prefix_operators=[], qualifier=user, selectors=[MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"user\")], member=equals, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), operator=&&)", "has_else": true}]}, {"name": "initAdmin", "modifiers": ["private"], "return_type": "void", "parameters": [], "invocations": [{"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"1. Exit/Logout\")"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"2. Create a customer account\")"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"3. See all transactions\")"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"4. Check bank balance\")"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"5. Approve cheque book request\")"]}, {"qualifier": "scanner", "member": "nextInt", "arguments": []}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"You have successfully logged out...\")"]}, {"qualifier": "main", "member": "addNewCustomer", "arguments": []}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Enter user id\")"]}, {"qualifier": "scanner", "member": "next", "arguments": []}, {"qualifier": "", "member": "printTransactions", "arguments": ["userId"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Enter user id\")"]}, {"qualifier": "scanner", "member": "next", "arguments": []}, {"qualifier": "", "member": "checkBankBalance", "arguments": ["userId"]}, {"qualifier": "System.out", "member": "println", "arguments": ["BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Your account balance is \"), operandr=MemberReference(member=accountBalance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)"]}, {"qualifier": "", "member": "getUserIdForCheckBookRequest", "arguments": []}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Please select user id from below..\")"]}, {"qualifier": "System.out", "member": "println", "arguments": ["userIds"]}, {"qualifier": "scanner", "member": "next", "arguments": []}, {"qualifier": "", "member": "approveChequeBookRequest", "arguments": ["userId"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Chequebook request is approved..\")"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Wrong choice\")"]}], "conditionals": []}, {"name": "approveChequeBookRequest", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "userId", "type": "String"}], "invocations": [{"qualifier": "userService", "member": "approveChequeBookRequest", "arguments": ["userId"]}], "conditionals": []}, {"name": "getUserIdForCheckBookRequest", "modifiers": ["private"], "return_type": "List", "parameters": [], "invocations": [{"qualifier": "userService", "member": "getUserIdForCheckBookRequest", "arguments": []}], "conditionals": []}, {"name": "addNewCustomer", "modifiers": ["private"], "return_type": "void", "parameters": [], "invocations": [{"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Enter username\")"]}, {"qualifier": "scanner", "member": "next", "arguments": []}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Enter password\")"]}, {"qualifier": "scanner", "member": "next", "arguments": []}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Enter contact number\")"]}, {"qualifier": "scanner", "member": "next", "arguments": []}, {"qualifier": "userService", "member": "addNewCustomer", "arguments": ["username", "password", "contact"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Customer account is created...\")"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Customer account creation failed...\")"]}], "conditionals": [{"condition": "MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])", "has_else": true}]}, {"name": "initCustomer", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "user", "type": "User"}], "invocations": [{"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"1. Exit/Logout\")"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"2. Check bank balance\")"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"3. Fund transfer\")"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"4. See all transactions\")"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"5. Raise cheque book request\")"]}, {"qualifier": "scanner", "member": "nextInt", "arguments": []}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"You have successfully logged out...\")"]}, {"qualifier": "main", "member": "checkBankBalance", "arguments": ["MethodInvocation(arguments=[], member=getUsername, postfix_operators=[], prefix_operators=[], qualifier=user, selectors=[], type_arguments=None)"]}, {"qualifier": "user", "member": "getUsername", "arguments": []}, {"qualifier": "System.out", "member": "println", "arguments": ["BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Your bank balance is \"), operandr=MemberReference(member=balance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Check your username\")"]}, {"qualifier": "main", "member": "fundTransfer", "arguments": ["user"]}, {"qualifier": "main", "member": "printTransactions", "arguments": ["MethodInvocation(arguments=[], member=getUsername, postfix_operators=[], prefix_operators=[], qualifier=user, selectors=[], type_arguments=None)"]}, {"qualifier": "user", "member": "getUsername", "arguments": []}, {"qualifier": "user", "member": "getUsername", "arguments": []}, {"qualifier": "", "member": "getAllChequeBookRequest", "arguments": []}, {"qualifier": "map", "member": "containsKey", "arguments": ["userId"]}, {"qualifier": "map", "member": "get", "arguments": ["userId"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"You have already raised a request and it is already approved\")"]}, {"qualifier": "map", "member": "containsKey", "arguments": ["userId"]}, {"qualifier": "map", "member": "get", "arguments": ["userId"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"You have already raised a request and it is pending for approval\")"]}, {"qualifier": "", "member": "raiseChequeBookRequest", "arguments": ["userId"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Request raised successfully..\")"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Wrong choice\")"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=balance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=)", "has_else": true}, {"condition": "BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=userId, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=containsKey, postfix_operators=[], prefix_operators=[], qualifier=map, selectors=[], type_arguments=None), operandr=MethodInvocation(arguments=[MemberReference(member=userId, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=[], qualifier=map, selectors=[], type_arguments=None), operator=&&)", "has_else": true}, {"condition": "BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=userId, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=containsKey, postfix_operators=[], prefix_operators=[], qualifier=map, selectors=[], type_arguments=None), operandr=MethodInvocation(arguments=[MemberReference(member=userId, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=[], prefix_operators=['!'], qualifier=map, selectors=[], type_arguments=None), operator=&&)", "has_else": true}]}, {"name": "getAllChequeBookRequest", "modifiers": ["private"], "return_type": "Map", "parameters": [], "invocations": [{"qualifier": "userService", "member": "getAllChequeBookRequest", "arguments": []}], "conditionals": []}, {"name": "raiseChequeBookRequest", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "userId", "type": "String"}], "invocations": [{"qualifier": "userService", "member": "raiseChequeBookRequest", "arguments": ["userId"]}], "conditionals": []}, {"name": "printTransactions", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "userId", "type": "String"}], "invocations": [{"qualifier": "userService", "member": "printTransactions", "arguments": ["userId"]}], "conditionals": []}, {"name": "fundTransfer", "modifiers": ["private"], "return_type": "void", "parameters": [{"name": "userDetails", "type": "User"}], "invocations": [{"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Enter payee account user id\")"]}, {"qualifier": "scanner", "member": "next", "arguments": []}, {"qualifier": "", "member": "getUser", "arguments": ["payeeAccountId"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Enter amount to transfer\")"]}, {"qualifier": "scanner", "member": "nextDouble", "arguments": []}, {"qualifier": "", "member": "checkBankBalance", "arguments": ["MethodInvocation(arguments=[], member=getUsername, postfix_operators=[], prefix_operators=[], qualifier=userDetails, selectors=[], type_arguments=None)"]}, {"qualifier": "userDetails", "member": "getUsername", "arguments": []}, {"qualifier": "userService", "member": "transferAmount", "arguments": ["MethodInvocation(arguments=[], member=getUsername, postfix_operators=[], prefix_operators=[], qualifier=userDetails, selectors=[], type_arguments=None)", "payeeAccountId", "amount"]}, {"qualifier": "userDetails", "member": "getUsername", "arguments": []}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Amount transferred successfully..\")"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Transfer failed...\")"]}, {"qualifier": "System.out", "member": "println", "arguments": ["BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Your balance is insufficient: \"), operandr=MemberReference(member=userAccountBalance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)"]}, {"qualifier": "System.out", "member": "println", "arguments": ["Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Please enter valid username...\")"]}], "conditionals": [{"condition": "BinaryOperation(operandl=MemberReference(member=user, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=)", "has_else": true}, {"condition": "BinaryOperation(operandl=MemberReference(member=userAccountBalance, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=amount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=>=)", "has_else": true}, {"condition": "MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])", "has_else": true}]}, {"name": "getUser", "modifiers": ["private"], "return_type": "User", "parameters": [{"name": "userId", "type": "String"}], "invocations": [{"qualifier": "userService", "member": "getUser", "arguments": ["userId"]}], "conditionals": []}, {"name": "checkBankBalance", "modifiers": ["private"], "return_type": "Double", "parameters": [{"name": "userId", "type": "String"}], "invocations": [{"qualifier": "userService", "member": "checkBankBalance", "arguments": ["userId"]}], "conditionals": []}]}]}


```
Rules:
1. Use @Test from JUnit 5.
2. Resolve all the dependencies. Use Mockito (@Mock, Mockito.when(...), verify(...)) for all dependencies.
3. Instantiate focal class
4. Use @BeforeEach for setting up required preconditions before each test method And @AfterEach for cleanup. Use @BeforeAll (static) if setup is required once before all tests.
5. For each invocation:
Stub its behavior (when(mock.member(args)).thenReturn(...) for non-void; doNothing().when(...) and verify mehtod call for void ).
6. Use Arrange-Act-Assert format.
  -Arrange: Set up inputs, mocks, or stubs.
  -Act: Call the method under test.
  -Assert:  Verify the results.
7. Make all test methods public.
8. Import only what's necessary: JUnit 5, Mockito, and the class under test.
9. Return only a complete Java test class, no explanation.
'''

result: ```
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.mockito.Mockito.*;

class BankAccountTest {
    private BankAccount bankAccount;
    @Mock
    private UserService userService;

    @BeforeEach
    void setUp() {
        bankAccount = new BankAccount();
    }

    @Test
    void testDeposit() {
        // Arrange
        double amount = 100.0;
        when(userService.checkBankBalance("username")).thenReturn(amount);

        // Act
        bankAccount.deposit("username", amount);

        // Assert
        verify(userService, times(1)).checkBankBalance("username");
    }
}
```
